#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef LIQUID_SWIFT_H
#define LIQUID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Liquid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// 追加情報
SWIFT_CLASS("_TtC6Liquid14AdditionalData")
@interface AdditionalData : NSObject
/// 追加情報(タイトル)
@property (nonatomic, readonly, copy) NSString * _Nonnull maintenanceTitle;
/// 追加情報(メッセージ)
@property (nonatomic, readonly, copy) NSString * _Nonnull maintenanceMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 生年の和暦西暦
typedef SWIFT_ENUM(NSInteger, BirthYearCalendarType, open) {
/// 和暦
  BirthYearCalendarTypeJapaneseCalendar = 1,
/// 西暦
  BirthYearCalendarTypeGregorianCalendar = 2,
};


enum Sex : NSInteger;
@class JapaneseForeignerJudgment;
@class MovedAbroad;
enum ResidenceCardInfoType : NSInteger;
enum ResidenceCardType : NSInteger;
@class UIImage;
@class ChipErrorData;

/// チップデータ
SWIFT_CLASS("_TtC6Liquid8ChipData")
@interface ChipData : NSObject
/// 氏名
@property (nonatomic, copy) NSString * _Nullable name;
/// 氏名（全角カナ）
@property (nonatomic, copy) NSString * _Nullable nameKana;
/// 氏名（半角カナ）
@property (nonatomic, copy) NSString * _Nullable nameHalfWidthKana;
/// 姓（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable lastNameKanaCandidates;
/// 姓（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable lastNameHalfWidthKanaCandidates;
/// 名（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable firstNameKanaCandidates;
/// 名（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable firstNameHalfWidthKanaCandidates;
/// 旧氏名
@property (nonatomic, copy) NSString * _Nullable previousName;
/// 旧姓（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable previousLastNameKanaCandidates;
/// 旧姓（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable previousLastNameHalfWidthKanaCandidates;
/// 生年月日
@property (nonatomic, copy) NSString * _Nullable birthday;
/// 住所
@property (nonatomic, copy) NSString * _Nullable address;
/// 本人確認書類番号
@property (nonatomic, copy) NSString * _Nullable idNumber;
/// 有効期限（西暦）
@property (nonatomic, copy) NSString * _Nullable expireDate;
/// 個人番号
@property (nonatomic, copy) NSString * _Nullable myNumber;
/// 郵便番号
@property (nonatomic, copy) NSString * _Nullable zipCode;
/// 性別 (Objective-C用)<br />
/// ・<code>sexValueIsValid</code> が <code>true</code> の場合、有効な値 <br />
/// 　 (<code>Sex.male</code>, <code>Sex.female</code>, <code>Sex.others</code> のいずれか)<br />
/// ・<code>sexValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum Sex sexValue;
/// 性別(<code>sexValue</code>) が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、性別(<code>sexValue</code>) の値は有効な値<br />
/// 　(<code>Sex.male</code>, <code>Sex.female</code>, <code>Sex.others</code> のいずれか)<br />
/// 　Swift用(<code>sex</code>)での <code>sex != nil</code> と同等
/// ・<code>false</code> の場合、性別(<code>sexValue</code>) の値は無効な値<br />
/// 　Swift用(<code>sex</code>)での <code>sex == nil</code> と同等
@property (nonatomic) BOOL sexValueIsValid;
/// 日本人/外国人判定<br />
/// ※推測値のため、日本人であっても判定結果で外国人が返却される場合（あるいはその逆）があります
@property (nonatomic, strong) JapaneseForeignerJudgment * _Nullable japaneseForeignerJudgment;
/// 国外転出有無
@property (nonatomic, strong) MovedAbroad * _Nullable movedAbroad;
/// 国外転出予定日
@property (nonatomic, copy) NSString * _Nullable plannedAbroadMoveDate;
/// 在留カードの裏面資格外活動包括許可欄
@property (nonatomic, copy) NSString * _Nullable residenceCardComprehensivePermission;
/// 在留カードの裏面資格外活動個別許可欄
@property (nonatomic, copy) NSString * _Nullable residenceCardIndividualPermission;
/// 在留カードの裏面在留期間等更新申請欄 (Objective-C用)<br />
/// ・<code>residenceCardUpdateStatusValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>true</code>: 申請中、<code>false</code>: 無し)<br />
/// ・<code>residenceCardUpdateStatusValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) BOOL residenceCardUpdateStatusValue;
/// 在留カードの裏面在留期間等更新申請欄(<code>residenceCardUpdateStatusValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardUpdateStatusValue</code> は有効な値<br />
/// 　(<code>true</code>: 申請中、<code>false</code>: 無し)<br />
/// 　Swift用(<code>residenceCardUpdateStatus</code>)での <code>residenceCardUpdateStatus != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardUpdateStatusValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardUpdateStatus</code>)での <code>residenceCardUpdateStatus == nil</code> と同等
@property (nonatomic) BOOL residenceCardUpdateStatusValueIsValid;
/// 在留カード／特別永住者証明書が保有している情報の種別 (Objective-C用)<br />
/// ・<code>residenceCardInfoTypeValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>ResidenceCardInfoType.normal</code>, <code>ResidenceCardInfoType.under_16</code>, <code>ResidenceCardInfoType.noCertificate</code> のいずれか)<br />
/// ・<code>residenceCardInfoTypeValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum ResidenceCardInfoType residenceCardInfoTypeValue;
/// 在留カード／特別永住者証明書が保有している情報の種別(<code>residenceCardInfoTypeValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardInfoTypeValue</code> は有効な値<br />
/// 　(<code>ResidenceCardInfoType.normal</code>, <code>ResidenceCardInfoType.under_16</code>, <code>ResidenceCardInfoType.noCertificate</code> のいずれか)<br />
/// 　Swift用(<code>residenceCardInfoType</code>)での <code>residenceCardInfoType != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardInfoTypeValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardInfoType</code>)での <code>residenceCardInfoType == nil</code> と同等
@property (nonatomic) BOOL residenceCardInfoTypeValueIsValid;
/// 在留カード／特別永住者証明書の種別 (Objective-C用)<br />
/// ・<code>residenceCardTypeValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>ResidenceCardType.undetected</code>, <code>ResidenceCardType.residenceCard</code>, <code>ResidenceCardType.specialPermanentResidentCertificate</code> のいずれか)<br />
/// ・<code>residenceCardTypeValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum ResidenceCardType residenceCardTypeValue;
/// 在留カード／特別永住者証明書の種別(<code>residenceCardTypeValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardTypeValue</code> は有効な値<br />
/// 　(<code>ResidenceCardType.undetected</code>, <code>ResidenceCardType.residenceCard</code>, <code>ResidenceCardType.specialPermanentResidentCertificate</code> のいずれか)<br />
/// 　Swift用(<code>residenceCardType</code>)での <code>residenceCardType != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardTypeValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardType</code>)での <code>residenceCardType == nil</code> と同等
@property (nonatomic) BOOL residenceCardTypeValueIsValid;
/// 券面顔写真
@property (nonatomic, strong) UIImage * _Nullable idFacePhoto;
/// 氏名の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull nameExternalCharacters;
/// 旧氏名の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull previousNameExternalCharacters;
/// 住所の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull addressExternalCharacters;
/// 【非推奨】氏名の外字の有無を返却するメソッド
- (BOOL)existExternalCharInName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
/// 【非推奨】住所の外字の有無を返却するメソッド
- (BOOL)existExternalCharInAddress SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
/// 更新氏名の有無<br />
/// (true: 氏名の記載事項変更がある場合、false: 氏名の記載事項変更がない場合)
@property (nonatomic) BOOL isExistLatestName;
/// 更新住所の有無<br />
/// (true: 住所の記載事項変更がある場合、false: 住所の記載事項変更がない場合)
@property (nonatomic) BOOL isExistLatestAddress;
/// ICカード読取エラー関連情報<br />
/// 処理結果が以下の場合に返却される<br />
/// ・ICチップでPIN間違い “chip_pin_invalid” (詳細エラーコード= SE20015)
@property (nonatomic, strong) ChipErrorData * _Nullable chipErrorData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ICカード読取エラー関連情報
SWIFT_CLASS("_TtC6Liquid13ChipErrorData")
@interface ChipErrorData : NSObject
/// ICカードに搭載されるチップのPIN照合ができる残回数<br />
/// ※残回数を超過した場合、チップがロックされます
@property (nonatomic, readonly) NSInteger attemptsRemainingUntilChipLocked;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

/// 各種画面のデザイン設定用
/// <pre>
/// 例: DesignSettingsBuilder()
///        .setPositiveButtonInactiveBgColor(ポジティブ非アクティブボタン背景色)
///        .setPositiveButtonActiveBgColor(ポジティブアクティブボタン背景色)
///        .setPositiveButtonFontColor(ポシティブボタン文字色)
///        .setNegativeButtonBgColor(ネガティブボタン背景色)
///        .setNegativeButtonFontColor(ネガティブボタン文字色)
///        .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid14DesignSettings")
@interface DesignSettings : NSObject
/// ポジティブボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonInactiveBgColor;
/// ポジティブボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonActiveBgColor;
/// ポジティブボタンの文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonFontColor;
/// ネガティブボタンの背景色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable negativeButtonBgColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 各種画面のデザイン設定用ビルダー
SWIFT_CLASS("_TtC6Liquid21DesignSettingsBuilder")
@interface DesignSettingsBuilder : NSObject
/// ポジティブボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonInactiveBgColor:(UIColor * _Nonnull)color;
/// ポジティブボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonActiveBgColor:(UIColor * _Nonnull)color;
/// ポジティブボタンの文字色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonFontColor:(UIColor * _Nonnull)color;
/// ネガティブボタンの背景色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setNegativeButtonBgColor:(UIColor * _Nonnull)color;
/// ネガティブボタンの文字色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setNegativeButtonFontColor:(UIColor * _Nonnull)color;
///
- (DesignSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 画像(書類)
SWIFT_CLASS("_TtC6Liquid13DocumentImage")
@interface DocumentImage : NSObject
/// 書類 表面<br />
/// ※パスポートの場合は、顔写真のあるページの画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nonnull front;
/// 【非推奨】書類 厚み<br />
/// 厚みが存在し得ない方式(例: verifyIdDocument() の身元確認方式を “表面撮影方式（容貌あり）” で実行した場合）においては、“空のUIImage” が返ります<br />
/// それ以外は diagonalOrNil と同等です
@property (nonatomic, readonly, strong) UIImage * _Nonnull diagonal SWIFT_DEPRECATED;
/// 書類 厚み
@property (nonatomic, readonly, strong) UIImage * _Nullable diagonalOrNil;
/// 【非推奨】書類 裏面<br />
/// backOrNil と同等です<br />
/// ※パスポートの場合は、所持人記入欄の画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nullable back SWIFT_DEPRECATED;
/// 書類 裏面<br />
/// ※パスポートの場合は、所持人記入欄の画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nullable backOrNil;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// (運転免許証用の) 外字用オブジェクト
SWIFT_CLASS("_TtC6Liquid30DriverLicenseExternalCharacter")
@interface DriverLicenseExternalCharacter : NSObject
/// 外字のサイズ
@property (nonatomic, readonly) NSInteger size;
/// 外字の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull image;
/// コンストラクタ
/// \param size 外字のサイズ
///
/// \param image 外字の画像
///
- (nonnull instancetype)initWithSize:(NSInteger)size image:(NSData * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// パスワード
SWIFT_PROTOCOL("_TtP6Liquid20VerifyIdChipPassword_")
@protocol VerifyIdChipPassword
@end


/// パスワード・運転免許証用
SWIFT_CLASS("_TtC6Liquid21DriverLicensePassword")
@interface DriverLicensePassword : NSObject <VerifyIdChipPassword>
/// 暗証番号1
@property (nonatomic, readonly, copy) NSString * _Nonnull pin1;
/// 暗証番号2
@property (nonatomic, readonly, copy) NSString * _Nonnull pin2;
/// コンストラクタ
/// \param pin1 暗証番号1
///
/// \param pin2 暗証番号2
///
- (nonnull instancetype)initWithPin1:(NSString * _Nonnull)pin1 pin2:(NSString * _Nonnull)pin2 OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RAWデータ
SWIFT_CLASS("_TtC6Liquid9ICRawData")
@interface ICRawData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// RAWデータ・運転免許証用
SWIFT_CLASS("_TtC6Liquid20DriverLicenseRawData")
@interface DriverLicenseRawData : ICRawData
/// 記載事項（本籍除く）の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseEntriesRawData;
/// 記載事項（本籍）の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull registeredDomicileRawData;
/// 顔写真の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull photoRawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 本人確認書類番号
@property (nonatomic, readonly, copy) NSString * _Nonnull idNumber;
/// 最新の変更履歴のうちの氏名
@property (nonatomic, readonly, copy) NSString * _Nullable newName;
/// 最新の変更履歴のうちの氏名に関わるカナ
@property (nonatomic, readonly, copy) NSString * _Nullable newNameKana;
/// 最新の変更履歴のうちの旧氏名<br />
/// ※記載事項変更された氏名に旧姓が付随している場合のみ、当項目を引き渡すこと
@property (nonatomic, readonly, copy) NSString * _Nullable newPreviousName;
/// 最新の変更履歴のうちの住所
@property (nonatomic, readonly, copy) NSString * _Nullable newAddress;
/// 氏名の外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterName;
/// 住所の外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterAddress;
/// 最新の変更履歴のうちの氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewName;
/// 署名対象の旧氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterPreviousName;
/// 最新の変更履歴のうちの旧氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewPreviousName;
/// 最新の変更履歴のうちの住所に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewAddress;
/// 更新氏名の有無
@property (nonatomic, copy) NSString * _Nullable isExistLatestName;
/// 更新住所の有無
@property (nonatomic, copy) NSString * _Nullable isExistLatestAddress;
/// コンストラクタ
/// \param licenseEntriesRawData 記載事項（本籍除く）の署名検証対象データ
///
/// \param registeredDomicileRawData 記載事項（本籍）の署名検証対象データ
///
/// \param photoRawData 顔写真の署名検証対象データ
///
/// \param photo 顔写真
///
/// \param idNumber 本人確認書類番号
///
/// \param newName 最新の変更履歴のうちの氏名
///
/// \param newNameKana 最新の変更履歴のうちの氏名に関わるカナ
///
/// \param newPreviousName 最新の変更履歴のうちの旧氏名
///
/// \param newAddress 最新の変更履歴のうちの住所
///
/// \param externalCharacterName 氏名の外字のリスト
///
/// \param externalCharacterAddress 住所の外字のリスト
///
/// \param externalCharacterNewName 最新の変更履歴のうちの氏名に関わる外字のリスト
///
/// \param externalCharacterPreviousName 署名対象の旧氏名に関わる外字のリスト
///
/// \param externalCharacterNewPreviousName 最新の変更履歴のうちの旧氏名に関わる外字のリスト
///
/// \param externalCharacterNewAddress 最新の変更履歴のうちの住所に関わる外字のリスト
///
/// \param isExistLatestName 更新氏名の有無
///
/// \param isExistLatestAddress 更新住所の有無
///
- (nonnull instancetype)initWithLicenseEntriesRawData:(NSString * _Nonnull)licenseEntriesRawData registeredDomicileRawData:(NSString * _Nonnull)registeredDomicileRawData photoRawData:(NSString * _Nonnull)photoRawData photo:(NSData * _Nonnull)photo idNumber:(NSString * _Nonnull)idNumber newName:(NSString * _Nullable)newName newNameKana:(NSString * _Nullable)newNameKana newPreviousName:(NSString * _Nullable)newPreviousName newAddress:(NSString * _Nullable)newAddress externalCharacterName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterName externalCharacterAddress:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterAddress externalCharacterNewName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewName externalCharacterPreviousName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterPreviousName externalCharacterNewPreviousName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewPreviousName externalCharacterNewAddress:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewAddress isExistLatestName:(NSString * _Nullable)isExistLatestName isExistLatestAddress:(NSString * _Nullable)isExistLatestAddress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Liveness;

/// 画像(本人容貌)
SWIFT_CLASS("_TtC6Liquid9FaceImage")
@interface FaceImage : NSObject
/// 本人容貌
@property (nonatomic, readonly, strong) UIImage * _Nonnull faceFront;
/// ライブネスチェック
@property (nonatomic, readonly, strong) Liveness * _Nonnull liveness;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FacePhotoVerificationResult : NSInteger;

/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
SWIFT_CLASS("_TtC6Liquid21FacePhotoVerification")
@interface FacePhotoVerification : NSObject
/// 顔写真照合結果
@property (nonatomic, readonly) enum FacePhotoVerificationResult result;
/// 判定スコア値
@property (nonatomic, readonly) NSInteger score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 顔写真照合結果
typedef SWIFT_ENUM(NSInteger, FacePhotoVerificationResult, open) {
/// 高（他人受入率 1/100,000以下）
  FacePhotoVerificationResultHigh = 0,
/// 中（他人受入率 1/100,000～1/10,000）
  FacePhotoVerificationResultMiddle = 1,
/// 低（他人受入率 1/10,000以上）
  FacePhotoVerificationResultLow = 2,
};

enum FaceVerificationResult : NSInteger;

/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
SWIFT_CLASS("_TtC6Liquid16FaceVerification")
@interface FaceVerification : NSObject
/// 顔真贋確認結果
@property (nonatomic, readonly) enum FaceVerificationResult result;
/// 判定スコア値
@property (nonatomic, readonly) NSInteger score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
SWIFT_CLASS("_TtC6Liquid23FaceVerificationPassive")
@interface FaceVerificationPassive : NSObject
/// 顔真贋確認結果<br />
/// (true: 本物の顔、false: 偽物の顔)
@property (nonatomic, readonly) BOOL result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 顔真贋確認結果
typedef SWIFT_ENUM(NSInteger, FaceVerificationResult, open) {
/// 同一人物（他人受入率 1/100,000以下）
  FaceVerificationResultSame = 0,
/// 同一人物ではない可能性があります（1/10,000以下）
  FaceVerificationResultNotEqual = 1,
};

/// 判定方式
typedef SWIFT_ENUM(NSInteger, FaceVerificationType, open) {
/// アクティブ判定
  FaceVerificationTypeActive = 0,
/// パッシブ判定
  FaceVerificationTypePassive = 1,
};


/// ICカード(NFC) 読み取り状態
typedef SWIFT_ENUM(NSInteger, IdChipAvailabilityStatus, open) {
/// 対応<br />
/// ※NFC搭載あり
  IdChipAvailabilityStatusEnabled = 0,
/// 非対応<br />
/// ※NFC搭載なし
  IdChipAvailabilityStatusUnsupported = 1,
};

/// 本人確認書類種別
typedef SWIFT_ENUM(NSInteger, IdDocumentType, open) {
/// 運転免許証
  IdDocumentTypeDriverLicence = 1,
/// マイナンバーカード
  IdDocumentTypeMynumberCard = 2,
/// 在留カード
  IdDocumentTypeResidenceCard = 3,
/// パスポート（2020年2月3日以前）
  IdDocumentTypePassport = 4,
/// 特別永住者証明書
  IdDocumentTypeSpecialPermanentResidentCertificate = 5,
/// 運転経歴証明書
  IdDocumentTypeDriverLicenseHistory = 6,
/// 健康保険証
  IdDocumentTypeHealthInsuranceCard = 7,
/// 身体障害者手帳（紙様式）
  IdDocumentTypePhysicalDisabilityCertificateBook = 8,
/// 身体障害者手帳（カード様式）
  IdDocumentTypePhysicalDisabilityCertificateCard = 9,
/// 療育手帳（紙様式）
  IdDocumentTypeSpecialEducationBook = 10,
/// 療育手帳（カード様式）
  IdDocumentTypeSpecialEducationCard = 11,
/// 精神障害者保険福祉手帳（紙様式）
  IdDocumentTypeMentalDisabilityCertificateBook = 12,
/// 精神障害者保険福祉手帳（カード様式）
  IdDocumentTypeMentalDisabilityCertificateCard = 13,
/// 年金手帳<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypePensionBook = 14,
/// 基礎年金番号通知書<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeBasicPensionNumberNotification = 15,
/// パスポート（全期間）
  IdDocumentTypePassportAllPeriods = 16,
/// 住民基本台帳カード<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeBasicResidentRegistrationCard = 17,
/// 学生証<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeStudentIdCard = 18,
/// 学生手帳<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeStudentNotebook = 19,
/// 社員証<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeEmployeeIdCard = 21,
/// マイナンバーカード（＋個人番号）
  IdDocumentTypeMynumberCardWithMyNumber = 22,
};

/// 本人確認書類種別(公的個人認証用)
typedef SWIFT_ENUM(NSInteger, IdDocumentTypeJpki, open) {
/// マイナンバーカード
  IdDocumentTypeJpkiMynumberCard = 1,
/// マイナンバーカード（＋個人番号）
  IdDocumentTypeJpkiMynumberCardWithMyNumber = 2,
};


/// 【書類ファンクションの書類真贋判定利用時用】<br />「書類（表面）画像」の真贋判定結果
SWIFT_CLASS("_TtC6Liquid22IdDocumentVerification")
@interface IdDocumentVerification : NSObject
/// 書類真贋確認結果<br />
/// (true: 本物の書類、false: 偽物の書類の可能性が高い)
@property (nonatomic, readonly) BOOL result;
/// 判定スコア値
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証ファンクション（画面なし）用設定値
/// <pre>
/// 例:
/// let parameters = IdentifyIdChipNonInteractiveParametersBuilder(password: 署名用電子証明書のパスワード)
///     .setBase64TargetData(電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid38IdentifyIdChipNonInteractiveParameters")
@interface IdentifyIdChipNonInteractiveParameters : NSObject
/// 署名用電子証明書のパスワード
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
@property (nonatomic, readonly, copy) NSString * _Nullable base64TargetData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 公的個人認証ファンクション（画面なし）用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid45IdentifyIdChipNonInteractiveParametersBuilder")
@interface IdentifyIdChipNonInteractiveParametersBuilder : NSObject
/// 公的個人認証ファンクション（画面なし）用設定値ビルダー
/// \param password 署名用電子証明書のパスワード
///
- (nonnull instancetype)initWithPassword:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
- (IdentifyIdChipNonInteractiveParametersBuilder * _Nonnull)setBase64TargetData:(NSString * _Nullable)base64TargetData;
///
- (IdentifyIdChipNonInteractiveParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VerificationMethodJpki : NSInteger;

/// 公的個人認証ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = IdentifyIdChipParameters()
///     .setDocumentTypeJpki(本人確認書類種別(公的個人認証用))
///     .setVerificationMethodJpki(身元確認方式(公的個人認証用))
///     .setBase64TargetData(電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値)
///     .setEnabledChipForgotPin(「ICチップの暗証番号失念」機能の利用可否)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid24IdentifyIdChipParameters")
@interface IdentifyIdChipParameters : NSObject
/// 本人確認書類種別(公的個人認証用)<br />
/// ※省略可 (省略時は「マイナンバーカード」がデフォルト値)
@property (nonatomic, readonly) enum IdDocumentTypeJpki documentTypeJpki;
/// 身元確認方式(公的個人認証用)<br />
/// ※省略可 (省略時は「ワ対応」がデフォルト値)
@property (nonatomic, readonly) enum VerificationMethodJpki verificationMethodJpki;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
@property (nonatomic, readonly, copy) NSString * _Nullable base64TargetData;
/// 「ICチップの暗証番号失念」機能の利用可否<br />
/// (true: 「ICチップの暗証番号失念」ボタンを表示する【デフォルト値】、false: 「ICチップの暗証番号失念」ボタンを表示しない)
@property (nonatomic, readonly) BOOL enabledChipForgotPin;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 公的個人認証ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid31IdentifyIdChipParametersBuilder")
@interface IdentifyIdChipParametersBuilder : NSObject
/// 本人確認書類種別(公的個人認証用)<br />
/// ※省略可 (省略時は「マイナンバーカード」がデフォルト値)
- (IdentifyIdChipParametersBuilder * _Nonnull)setDocumentTypeJpki:(enum IdDocumentTypeJpki)documentTypeJpki;
/// 身元確認方式(公的個人認証用)<br />
/// ※省略可 (省略時は「ワ対応」がデフォルト値)
- (IdentifyIdChipParametersBuilder * _Nonnull)setVerificationMethodJpki:(enum VerificationMethodJpki)verificationMethodJpki;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
- (IdentifyIdChipParametersBuilder * _Nonnull)setBase64TargetData:(NSString * _Nullable)base64TargetData;
/// 「ICチップの暗証番号失念」機能の利用可否<br />
/// (true: 「ICチップの暗証番号失念」ボタンを表示する【デフォルト値】、false: 「ICチップの暗証番号失念」ボタンを表示しない)
- (IdentifyIdChipParametersBuilder * _Nonnull)setEnabledChipForgotPin:(BOOL)enabledChipForgotPin;
///
- (IdentifyIdChipParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ProcResult;
@class JpkiResult;
@class JpkiEvidence;

/// 公的個人認証ファンクションの結果
SWIFT_CLASS("_TtC6Liquid20IdentifyIdChipResult")
@interface IdentifyIdChipResult : NSObject
/// 処理結果
@property (nonatomic, strong) ProcResult * _Nonnull result;
/// 公的個人認証結果
@property (nonatomic, strong) JpkiResult * _Nonnull jpkiResult;
/// 公的個人認証証跡
@property (nonatomic, strong) JpkiEvidence * _Nonnull jpkiEvidence;
/// ICカード読取情報
@property (nonatomic, strong) ChipData * _Nullable chipData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 日本人/外国人判定<br />
/// ※推測値のため、日本人であっても判定結果で外国人が返却される場合（あるいはその逆）があります
SWIFT_CLASS("_TtC6Liquid25JapaneseForeignerJudgment")
@interface JapaneseForeignerJudgment : NSObject
/// 日本人
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) JapaneseForeignerJudgment * _Nonnull japanese;)
+ (JapaneseForeignerJudgment * _Nonnull)japanese SWIFT_WARN_UNUSED_RESULT;
+ (void)setJapanese:(JapaneseForeignerJudgment * _Nonnull)value;
/// 外国人
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) JapaneseForeignerJudgment * _Nonnull foreigner;)
+ (JapaneseForeignerJudgment * _Nonnull)foreigner SWIFT_WARN_UNUSED_RESULT;
+ (void)setForeigner:(JapaneseForeignerJudgment * _Nonnull)value;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証証跡
SWIFT_CLASS("_TtC6Liquid12JpkiEvidence")
@interface JpkiEvidence : NSObject
/// iTrust本人確認対象利用者識別番号
@property (nonatomic, copy) NSString * _Nullable uid;
/// 確認時刻
@property (nonatomic, copy) NSString * _Nullable asof;
/// 有効期間(開始)
@property (nonatomic, copy) NSString * _Nullable notBefore;
/// 有効期間(終了)
@property (nonatomic, copy) NSString * _Nullable notAfter;
/// 発行主体
@property (nonatomic, copy) NSString * _Nullable issuerDn;
/// 電子署名識別子
@property (nonatomic, copy) NSString * _Nullable signatureId;
/// 失効事由<br />
/// 0 - 有効<br />
/// 1 - 交付前に何らかの問題が発生したため破棄<br />
/// 2 - マイナンバーカードを紛失またはPINが漏洩等の理由での本人の申し出による利用停止<br />
/// 3 - CAの秘密鍵が漏洩<br />
/// 4 - 氏名、住所等の変更または本人の死亡、海外転出<br />
/// 5 - 通常記録されない失効事由。現況不明<br />
/// 6 - 海外転出等の理由での本人の申し出による利用停止<br />
/// 7 - マイナンバーカードを紛失またはPINが漏洩した疑いがあり本人の申し出による利用停止<br />
/// 8 - 不明な失効事由<br />
/// -1 - 公的個人認証が成功していないため、失効事由未取得
@property (nonatomic) NSInteger revokedReason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証結果
SWIFT_CLASS("_TtC6Liquid10JpkiResult")
@interface JpkiResult : NSObject
/// 電子署名の確認結果
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class UIViewController;
@class VerifyFaceResult;
@class VerifyFaceParameters;
@class VerifyIdDocumentResult;
enum VerificationMethod : NSInteger;
@class VerifyIdDocumentParameters;
@class VerifyIdChipParameters;
@class VerifyIdChipResult;
@class OcrResult;
@class TermsOfUseSettings;

/// Liquid SDKの機能を利用する窓口となるクラス
SWIFT_CLASS("_TtC6Liquid10LiquidEkyc")
@interface LiquidEkyc : NSObject
/// 初期化ファンクション<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param applicant Connector『LIQUID_eKYC_017_SDK本人確認申請API』に引き渡した連携ID
///
/// \param token Connector『LIQUID_eKYC_017_SDK本人確認申請API』から受け取った認証トークン
///
+ (void)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint applicant:(NSString * _Nonnull)applicant token:(NSString * _Nonnull)token;
/// 【非推奨】初期化ファンクション<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param token Connector『LIQUID_eKYC_017_SDK本人確認申請API』から受け取った認証トークン
///
/// \param applicant Connector『LIQUID_eKYC_017_SDK本人確認申請API』に引き渡した連携ID
///
/// \param apiKey SDK用APIキー
///
+ (void)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint token:(NSString * _Nonnull)token applicant:(NSString * _Nonnull)applicant apiKey:(NSString * _Nonnull)apiKey SWIFT_DEPRECATED;
/// 初期化ファンクション（評価版用）<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param apiKey SDK用APIキー
///
/// \param completion 処理終了時コールバック
///
///
/// returns:
/// 連携ID
+ (NSString * _Nonnull)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint apiKey:(NSString * _Nonnull)apiKey completion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// 【非推奨】本人容貌ファンクション
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyFaceOn:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyFaceResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 本人容貌ファンクション
/// \param verifyFaceParameters 本人容貌ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyFaceWithParameters:(VerifyFaceParameters * _Nonnull)verifyFaceParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyFaceResult * _Nonnull))completion;
/// 【非推奨】書類ファンクション（ホ対応用）
/// \param document 本人確認書類種別
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocument:(enum IdDocumentType)document on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 【非推奨】書類ファンクション
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocument:(enum IdDocumentType)document :(enum VerificationMethod)verificationMethod on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 書類ファンクション
/// \param verifyIdDocumentParameters 書類ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocumentWithParameters:(VerifyIdDocumentParameters * _Nonnull)verifyIdDocumentParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion;
/// 書類ICカードファンクション
/// \param verifyIdChipParameters 書類ICカードファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipWithParameters:(VerifyIdChipParameters * _Nonnull)verifyIdChipParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 【非推奨】書類ICカードファンクション
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum IdDocumentType)document :(enum VerificationMethod)verificationMethod on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 【非推奨】書類ICカードファンクション（へ対応用）
/// \param document 本人確認書類種別
///
/// \param chipVerifyKey 電子署名検証用キー
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum IdDocumentType)document chipVerifyKey:(NSString * _Nonnull)chipVerifyKey on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 書類ICカードファンクション（署名検証のみ用）
/// \param verificationMethod 身元確認方式
///
/// \param showReviewScreen 確認画面の表示有無<br />(true: 撮影写真の確認画面を表示する、false: 撮影写真の確認画面を表示しない)<br />・身元確認方式が在留カードまたは特別永住者証明書を指定した場合のみ有効です<br />・身元確認方式がそれ以外の場合はいずれの値も無視します
///
/// \param signature 署名
///
/// \param verifyingParams 検証パラメータ
///
/// \param rawData RAWデータ<br />運転免許証時: DriverLicenseRawData<br/>マイナンバーカード時: MyNumberCardRawData<br/>在留カード時: ResidenceCardRawData<br/>特別永住者証明書時: SpecialPermanentResidentCertificateRawData
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum VerificationMethod)verificationMethod showReviewScreen:(BOOL)showReviewScreen signature:(NSString * _Nonnull)signature verifyingParams:(NSString * _Nonnull)verifyingParams rawData:(ICRawData * _Nonnull)rawData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 書類ICカードファンクション（署名検証のみ用(在留/特別永住 裏面なし)）
/// \param verificationMethod 身元確認方式
///
/// \param signature 署名
///
/// \param verifyingParams 検証パラメータ
///
/// \param rawData RAWデータ<br />在留カード時: ResidenceCardRawData<br/>特別永住者証明書時: SpecialPermanentResidentCertificateRawData
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipExcludeBack:(enum VerificationMethod)verificationMethod signature:(NSString * _Nonnull)signature verifyingParams:(NSString * _Nonnull)verifyingParams rawData:(ICRawData * _Nonnull)rawData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 【非推奨】公的個人認証ファンクション（ワ対応用）
/// \param base64TargetData 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)identifyIdChip:(NSString * _Nullable)base64TargetData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 公的個人認証ファンクション（ワ対応用）
/// \param parameters 公的個人認証ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)identifyIdChipWithParameters:(IdentifyIdChipParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion;
///
+ (void)endVerify SWIFT_DEPRECATED;
/// アクティベートファンクション
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param completion 処理終了時コールバック
///
+ (void)activateWithCompletion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion;
/// OCR結果取得ファンクション
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param completion 処理終了時コールバック
///
+ (void)getOcrResultsWithCompletion:(void (^ _Nonnull)(OcrResult * _Nonnull))completion;
/// 利用規約ファンクション
/// \param termsOfUseSettings 利用規約画面のデザイン設定用<br />※引数指定例: TermsOfUseSettings(headerFontColor: .blue, screenBgColor: .cyan, prefaceFontColor: .red, buttonInactiveBgColor: .black, buttonActiveBgColor: .green, buttonFontColor: .gray)
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)showTermsOfUseWithSettings:(TermsOfUseSettings * _Nullable)termsOfUseSettings on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion;
/// デザイン設定ファンクション
/// \param designSettings 各種画面のデザイン設定用
///
+ (void)customizeDesign:(DesignSettings * _Nonnull)designSettings;
/// バージョン取得ファンクション<br />
/// ・初期化ファンクション実行前でも利用可能です
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
///
/// returns:
/// バージョン
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// ICカード読み取り可否ファンクション<br />
/// ・初期化ファンクション実行前でも利用可能です
+ (enum IdChipAvailabilityStatus)checkIdChipAvailability SWIFT_WARN_UNUSED_RESULT;
@end


@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// 公的個人認証ファンクション（画面なし）（ワ対応用）
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameters: 公的個人認証ファンクション（画面なし）用設定値
///   </li>
///   <li>
///     viewController: 指定された viewController 上で画面が表示されます
///   </li>
///   <li>
///     completion: ファンクションの処理結果が返ります
///   </li>
/// </ul>
+ (void)identifyIdChipNonInteractiveWithParameters:(IdentifyIdChipNonInteractiveParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion;
@end

@class VerifyIdChipNonInteractiveParameters;

@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// 書類ICカードファンクション（画面なし）
/// \param verifyIdChipNonInteractiveParameters 書類ICカードファンクション（画面なし）用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipNonInteractive:(VerifyIdChipNonInteractiveParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
@end


/// ライブネスチェック
SWIFT_CLASS("_TtC6Liquid8Liveness")
@interface Liveness : NSObject
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern1;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern2;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern3;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern4;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern5;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern6;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern7;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 国外転出有無
SWIFT_CLASS("_TtC6Liquid11MovedAbroad")
@interface MovedAbroad : NSObject
/// 不明（マイナンバーカードの国外転出継続利用対応以前のデータ）
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull unknown;)
+ (MovedAbroad * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
+ (void)setUnknown:(MovedAbroad * _Nonnull)value;
/// 国外転出無し
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull no;)
+ (MovedAbroad * _Nonnull)no SWIFT_WARN_UNUSED_RESULT;
+ (void)setNo:(MovedAbroad * _Nonnull)value;
/// 国外転出有り
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull yes;)
+ (MovedAbroad * _Nonnull)yes SWIFT_WARN_UNUSED_RESULT;
+ (void)setYes:(MovedAbroad * _Nonnull)value;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// パスワード・マイナンバーカード用
SWIFT_CLASS("_TtC6Liquid20MyNumberCardPassword")
@interface MyNumberCardPassword : NSObject <VerifyIdChipPassword>
/// 照合番号B
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/// 生年の和暦西暦
@property (nonatomic, readonly) enum BirthYearCalendarType birthYearCalendarType;
/// コンストラクタ
/// \param password 照合番号B
///
/// \param birthYearCalendarType 生年の和暦西暦
///
- (nonnull instancetype)initWithPassword:(NSString * _Nonnull)password birthYearCalendarType:(enum BirthYearCalendarType)birthYearCalendarType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RAWデータ・マイナンバーカード用
SWIFT_CLASS("_TtC6Liquid19MyNumberCardRawData")
@interface MyNumberCardRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 有効期限（西暦）
@property (nonatomic, readonly, copy) NSString * _Nonnull expireDate;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param expireData 有効期限（西暦）
///
/// \param photo 顔写真
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData expireData:(NSString * _Nonnull)expireData photo:(NSData * _Nonnull)photo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// OCR結果
SWIFT_CLASS("_TtC6Liquid14OcrAcquisition")
@interface OcrAcquisition : NSObject
/// 氏名
@property (nonatomic, copy) NSString * _Nullable name;
/// 生年月日
@property (nonatomic, copy) NSString * _Nullable birthday;
/// 住所
@property (nonatomic, copy) NSString * _Nullable address;
/// 本人確認書類番号
@property (nonatomic, copy) NSString * _Nullable idNumber;
/// 有効期限（西暦）
@property (nonatomic, copy) NSString * _Nullable expireDate;
/// 国籍<br />
/// ※ISO 3166-1 alpha-2形式
@property (nonatomic, copy) NSString * _Nullable nationality;
/// 性別<br />
/// ※1:男性, 2:女性, 9:その他
@property (nonatomic, copy) NSString * _Nullable sex;
/// 郵便番号
@property (nonatomic, copy) NSString * _Nullable zipCode;
/// 住所 (都道府県)
@property (nonatomic, copy) NSString * _Nullable addressPref;
/// 住所 (市区町村)
@property (nonatomic, copy) NSString * _Nullable addressCity;
/// 住所 (その他)
@property (nonatomic, copy) NSString * _Nullable addressOther;
/// 運転免許証種類
@property (nonatomic, copy) NSArray<NSString *> * _Nullable driversLicenseTypes;
/// 備考記載有無<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:備考記載無し、1:備考記載あり、null:変更検知オプションの契約無し、もしくはOCR失敗
@property (nonatomic, copy) NSString * _Nullable remarksExist;
/// 在留資格
@property (nonatomic, copy) NSString * _Nullable residentStatus;
/// 在留期間
@property (nonatomic, copy) NSString * _Nullable stayPeriod;
/// 満了日
@property (nonatomic, copy) NSString * _Nullable stayExpireDate;
/// 許可年月日
@property (nonatomic, copy) NSString * _Nullable permittedDate;
/// 許可の種類
@property (nonatomic, copy) NSString * _Nullable kindOfPermission;
/// 就労制限の有無
@property (nonatomic, copy) NSString * _Nullable employmentRestriction;
/// 交付年月日
@property (nonatomic, copy) NSString * _Nullable issueDate;
/// 氏名変更フラグ<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:氏名の記載事項変更がない場合、1:氏名の記載事項変更がある場合、もしくは住所変更以外のなんらかの記載あり、nil:変更検知オプションの契約無し
@property (nonatomic, copy) NSString * _Nullable nameChanged;
/// 住所変更フラグ<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:住所の記載事項変更がない場合、1:住所の記載事項変更がある場合、もしくは氏名変更以外のなんらかの記載あり、nil:変更検知オプションの契約無し
@property (nonatomic, copy) NSString * _Nullable addressChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OCR結果取得ファンクションの結果
SWIFT_CLASS("_TtC6Liquid9OcrResult")
@interface OcrResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// OCR結果
@property (nonatomic, readonly, strong) OcrAcquisition * _Nullable ocr;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ResultStatus : NSInteger;

/// 処理結果
SWIFT_CLASS("_TtC6Liquid10ProcResult")
@interface ProcResult : NSObject
/// エラー種別
@property (nonatomic, readonly) enum ResultStatus status;
/// 詳細エラーコード
@property (nonatomic, readonly, copy) NSString * _Nonnull resultCode;
/// 追加情報
@property (nonatomic, readonly, strong) AdditionalData * _Nullable additionalData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 在留カード／特別永住者証明書が保有している情報の種別
typedef SWIFT_ENUM(NSInteger, ResidenceCardInfoType, open) {
/// 通常
  ResidenceCardInfoTypeNormal = 0,
/// 16歳未満（16歳の誕生日の半年前に交付されたカードを除く）のデータ
  ResidenceCardInfoTypeUnder_16 = 1,
/// チェックコード、公開鍵証明書が無いデータ
  ResidenceCardInfoTypeNoCertificate = 2,
};


/// RAWデータ・在留カード
SWIFT_CLASS("_TtC6Liquid20ResidenceCardRawData")
@interface ResidenceCardRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 券面(表)の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull frontDocumentImage;
/// 裏面在留期間等更新申請欄
@property (nonatomic, readonly) BOOL residenceCardUpdateStatus;
/// 在留カード／特別永住者証明書が保有している情報の種別
@property (nonatomic, readonly) NSInteger residenceCardInfoType;
/// 在留カード／特別永住者証明書の種別
@property (nonatomic, readonly) NSInteger residenceCardType;
/// 裏面資格外活動包括許可欄
@property (nonatomic, readonly, copy) NSString * _Nullable residenceCardComprehensivePermission;
/// 裏面資格外活動個別許可欄
@property (nonatomic, readonly, copy) NSString * _Nullable residenceCardIndividualPermission;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param photo 顔写真
///
/// \param frontDocumentImage 券面(表)の画像
///
/// \param residenceCardUpdateStatus 裏面在留期間等更新申請欄
///
/// \param residenceCardInfoType 在留カード／特別永住者証明書が保有している情報の種別
///
/// \param residenceCardType 在留カード／特別永住者証明書の種別
///
/// \param residenceCardComprehensivePermission 裏面資格外活動包括許可欄
///
/// \param residenceCardIndividualPermission 裏面資格外活動個別許可欄
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData photo:(NSData * _Nonnull)photo frontDocumentImage:(NSData * _Nonnull)frontDocumentImage residenceCardUpdateStatus:(BOOL)residenceCardUpdateStatus residenceCardInfoType:(NSInteger)residenceCardInfoType residenceCardType:(NSInteger)residenceCardType residenceCardComprehensivePermission:(NSString * _Nullable)residenceCardComprehensivePermission residenceCardIndividualPermission:(NSString * _Nullable)residenceCardIndividualPermission OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 在留カード／特別永住者証明書の種別
typedef SWIFT_ENUM(NSInteger, ResidenceCardType, open) {
/// 未検出
  ResidenceCardTypeUndetected = 0,
/// 在留カード
  ResidenceCardTypeResidenceCard = 1,
/// 特別永住者証明書
  ResidenceCardTypeSpecialPermanentResidentCertificate = 2,
};

/// 全ファンクションのエラー種別
typedef SWIFT_ENUM(NSInteger, ResultStatus, open) {
/// 正常時 “success”
  ResultStatusSuccess = 0,
/// サーバーメンテナンス時 “maintenance”
  ResultStatusMaintenance = 1,
/// パーミッション不足 “permission_not_allowed”
  ResultStatusPermissionNotAllowed = 2,
/// 画面タイムアウト “screen_timeout”
  ResultStatusScreenTimeout = 3,
/// セッションタイムアウト “session_timeout”
  ResultStatusSessionTimeout = 4,
/// OCR未完了 “ocr_in_progress”
  ResultStatusOcrInProgress = 5,
/// OCR利用不可 “ocr_unsupported”
  ResultStatusOcrUnSupported = 6,
/// ユーザー中断 “user_cancel”
  ResultStatusUserCancel = 7,
/// エラー終了 “error”
  ResultStatusError = 8,
/// ICチップがロック状態 “chip_locked”
  ResultStatusChipLocked = 9,
/// ICチップが特殊 “chip_unusual”
  ResultStatusChipUnusual = 10,
/// ICチップが特殊（更新情報あり） “chip_unusual_updated”
  ResultStatusChipUnusualUpdated = 11,
/// ICチップの電子署名の検証に失敗 “chip_verify_failure”
  ResultStatusChipVerifyFailure = 12,
/// ICチップが特殊（在留カード／特別永住者証明書） “chip_unusual_residencecard”
  ResultStatusChipUnusualResidencecard = 13,
/// ICチップの外字画像が欠字 “chip_missing_external_char”
  ResultStatusChipMissingExternalChar = 14,
/// 非対応端末(ICチップ理由) “unsupported_chip”
  ResultStatusUnsupportedChip = 15,
/// ICチップ(ただし在留カード／特別永住者証明書)でPIN間違い許容回数超過 “chip_pin_failure”
  ResultStatusChipPinFailure = 16,
/// ICチップが有効期限切れ “chip_expired”
  ResultStatusChipExpired = 17,
/// ICチップの暗証番号失念 “chip_forgot_pin”
  ResultStatusChipForgotPin = 18,
/// 公的個人認証が否認 “chip_identify_denied”
  ResultStatusChipIdentifyDenied = 19,
/// 公的個人認証がエラー終了 “chip_identify_error”
  ResultStatusChipIdentifyError = 20,
/// 利用規約未同意 “terms_do_not_agree”
  ResultStatusTermsDoNotAgree = 21,
/// 通信失敗 “communication_failure”
  ResultStatusCommunicationFailure = 22,
/// ICチップでPIN間違い “chip_pin_invalid”
  ResultStatusChipPinInvalid = 23,
/// ICチップの読み取り失敗 “chip_read_error”
  ResultStatusChipReadError = 24,
};

/// 性別
typedef SWIFT_ENUM(NSInteger, Sex, open) {
/// 男性
  SexMale = 0,
/// 女性
  SexFemale = 1,
/// その他
  SexOthers = 2,
};


/// RAWデータ・特別永住者証明書用
SWIFT_CLASS("_TtC6Liquid42SpecialPermanentResidentCertificateRawData")
@interface SpecialPermanentResidentCertificateRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 券面(表)の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull frontDocumentImage;
/// 在留カード／特別永住者証明書が保有している情報の種別
@property (nonatomic, readonly) NSInteger residenceCardInfoType;
/// 在留カード／特別永住者証明書の種別
@property (nonatomic, readonly) NSInteger residenceCardType;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param photo 顔写真
///
/// \param frontDocumentImage 券面(表)の画像
///
/// \param residenceCardInfoType 在留カード／特別永住者証明書が保有している情報の種別
///
/// \param residenceCardType 在留カード／特別永住者証明書の種別
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData photo:(NSData * _Nonnull)photo frontDocumentImage:(NSData * _Nonnull)frontDocumentImage residenceCardInfoType:(NSInteger)residenceCardInfoType residenceCardType:(NSInteger)residenceCardType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 利用規約画面のデザイン設定用
SWIFT_CLASS("_TtC6Liquid18TermsOfUseSettings")
@interface TermsOfUseSettings : NSObject
/// ヘッダー部の文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable headerFontColor;
/// 画面全体の背景色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable screenBgColor;
/// 冒頭文章の文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable prefaceFontColor;
/// 末端ボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonInactiveBgColor;
/// 末端ボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonActiveBgColor;
/// 末端ボタンの文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonFontColor;
/// コンストラクタ
/// \param headerFontColor ヘッダー部の文字色<br/>※省略時はデフォルト設定を利用
///
/// \param screenBgColor 画面全体の背景色<br/>※省略時はデフォルト設定を利用
///
/// \param prefaceFontColor 冒頭文章の文字色<br/>※省略時はデフォルト設定を利用
///
/// \param buttonInactiveBgColor 末端ボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
///
/// \param buttonActiveBgColor 末端ボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
///
/// \param buttonFontColor 末端ボタンの文字色<br/>※省略時はデフォルト設定を利用
///
- (nonnull instancetype)initWithHeaderFontColor:(UIColor * _Nullable)headerFontColor screenBgColor:(UIColor * _Nullable)screenBgColor prefaceFontColor:(UIColor * _Nullable)prefaceFontColor buttonInactiveBgColor:(UIColor * _Nullable)buttonInactiveBgColor buttonActiveBgColor:(UIColor * _Nullable)buttonActiveBgColor buttonFontColor:(UIColor * _Nullable)buttonFontColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



















/// 身元確認方式
typedef SWIFT_ENUM(NSInteger, VerificationMethod, open) {
/// ヘ対応
  VerificationMethodComplyHe = 1,
/// 非法令 IC読取対応（電子署名検証なし・本人容貌あり）
  VerificationMethodReadFace = 2,
/// ト対応
  VerificationMethodComplyTo = 3,
/// チ対応
  VerificationMethodComplyChi = 4,
/// 非法令 IC読取対応（電子署名検証なし・本人容貌なし）
  VerificationMethodRead = 5,
/// ホ対応
  VerificationMethodComplyHo = 6,
/// 表面撮影方式（容貌あり）
  VerificationMethodFrontFace = 7,
/// 表面撮影方式（容貌なし）
  VerificationMethodFront = 8,
/// 表裏面撮影方式（容貌あり）
  VerificationMethodFrontBackFace = 9,
/// 表裏面撮影方式（容貌なし）
  VerificationMethodFrontBack = 10,
};

/// 身元確認方式(公的個人認証用)
typedef SWIFT_ENUM(NSInteger, VerificationMethodJpki, open) {
/// ワ対応
  VerificationMethodJpkiComplyWa = 1,
/// JPKI+（容貌）
  VerificationMethodJpkiFaceJpki = 2,
};


/// 本人容貌ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyFaceParametersBuilder()
///    .setShowReviewScreen(確認画面の表示有無)
///    .setFaceVerificationType(判定方式)
///    .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid20VerifyFaceParameters")
@interface VerifyFaceParameters : NSObject
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
/// 判定方式<br />
/// (アクティブ判定【デフォルト値】、パッシブ判定）
@property (nonatomic, readonly) enum FaceVerificationType faceVerificationType;
/// Liquid指定 特殊用途事業者のみ設定
@property (nonatomic, readonly, copy) NSString * _Nonnull controlCharacter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 本人容貌ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid27VerifyFaceParametersBuilder")
@interface VerifyFaceParametersBuilder : NSObject
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyFaceParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
/// 判定方式<br />
/// (アクティブ判定【デフォルト値】、パッシブ判定）
- (VerifyFaceParametersBuilder * _Nonnull)setFaceVerificationType:(enum FaceVerificationType)verifyType;
/// Liquid指定 特殊用途事業者のみ設定
- (VerifyFaceParametersBuilder * _Nonnull)setControlCharacter:(NSString * _Nonnull)controlCharacter;
///
- (VerifyFaceParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 本人容貌ファンクションの結果
SWIFT_CLASS("_TtC6Liquid16VerifyFaceResult")
@interface VerifyFaceResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, readonly, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, readonly, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, readonly, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 画像(本人容貌)
@property (nonatomic, readonly, strong) FaceImage * _Nullable faceImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション（画面なし）用設定値
/// <pre>
/// 例: 運転免許証時
/// let parameters = VerifyIdChipNonInteractiveParametersBuilder(password: DriverLicensePassword(暗証番号1, 暗証番号2))
///     .build()
///
/// 例: マイナンバーカード時
/// let parameters = VerifyIdChipNonInteractiveParametersBuilder(password: MyNumberCardPassword(照合番号B, 生年の和暦西暦))
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid36VerifyIdChipNonInteractiveParameters")
@interface VerifyIdChipNonInteractiveParameters : NSObject
/// パスワード<br />
/// 運転免許証時: DriverLicensePassword<br/>
/// マイナンバーカード時: MyNumberCardPassword
@property (nonatomic, readonly, strong) id <VerifyIdChipPassword> _Nonnull password;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション（画面なし）用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid43VerifyIdChipNonInteractiveParametersBuilder")
@interface VerifyIdChipNonInteractiveParametersBuilder : NSObject
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     password: パスワード<br/>
///     運転免許証時: DriverLicensePassword<br/>
///     マイナンバーカード時: MyNumberCardPassword
///   </li>
/// </ul>
- (nonnull instancetype)initWithPassword:(id <VerifyIdChipPassword> _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
///
- (VerifyIdChipNonInteractiveParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyIdChipParametersBuilder(document: 本人確認書類種別, verificationMethod: 身元確認方式)
///     .setShowReviewScreen(確認画面の表示有無)
///     .build()
///  </pre>
SWIFT_CLASS("_TtC6Liquid22VerifyIdChipParameters")
@interface VerifyIdChipParameters : NSObject
/// 本人確認書類種別
@property (nonatomic, readonly) enum IdDocumentType document;
/// 身元確認方式
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid29VerifyIdChipParametersBuilder")
@interface VerifyIdChipParametersBuilder : NSObject
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     document: 本人確認書類種別
///   </li>
///   <li>
///     verificationMethod: 身元確認方式
///   </li>
/// </ul>
- (nonnull instancetype)initWithDocument:(enum IdDocumentType)document verificationMethod:(enum VerificationMethod)verificationMethod OBJC_DESIGNATED_INITIALIZER;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyIdChipParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
///
- (VerifyIdChipParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 書類ICカードファンクションの結果
SWIFT_CLASS("_TtC6Liquid18VerifyIdChipResult")
@interface VerifyIdChipResult : NSObject
/// 処理結果
@property (nonatomic, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 画像(書類)
@property (nonatomic, strong) DocumentImage * _Nullable documentImage;
/// ICカード読取情報
@property (nonatomic, strong) ChipData * _Nullable chipData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyIdDocumentParametersBuilder(document: 本人確認書類種別, verificationMethod: 身元確認方式)
///     .setShowReviewScreen(確認画面の表示有無)
///     .setUseIdDocumentVerification(書類真贋判定)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid26VerifyIdDocumentParameters")
@interface VerifyIdDocumentParameters : NSObject
/// 本人確認書類種別
@property (nonatomic, readonly) enum IdDocumentType document;
/// 身元確認方式
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
/// 書類真贋判定<br />
/// (true: 利用する、false: 利用しない【デフォルト値】)
@property (nonatomic, readonly) BOOL useIdDocumentVerification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid33VerifyIdDocumentParametersBuilder")
@interface VerifyIdDocumentParametersBuilder : NSObject
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
- (nonnull instancetype)initWithDocument:(enum IdDocumentType)document verificationMethod:(enum VerificationMethod)verificationMethod OBJC_DESIGNATED_INITIALIZER;
/// 確認画面の表示有無<br >
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyIdDocumentParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
/// 書類真贋判定<br />
/// (true: 利用する、false: 利用しない【デフォルト値】)
- (VerifyIdDocumentParametersBuilder * _Nonnull)setUseIdDocumentVerification:(BOOL)useIdDocumentVerification;
///
- (VerifyIdDocumentParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクションの結果
SWIFT_CLASS("_TtC6Liquid22VerifyIdDocumentResult")
@interface VerifyIdDocumentResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, readonly, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, readonly, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, readonly, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 【書類ファンクションの書類真贋判定利用時用】<br />「書類（表面）画像」の真贋判定結果
@property (nonatomic, readonly, strong) IdDocumentVerification * _Nullable idDocumentVerification;
/// 画像(書類)
@property (nonatomic, readonly, strong) DocumentImage * _Nullable documentImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef LIQUID_SWIFT_H
#define LIQUID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Liquid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// 追加情報
SWIFT_CLASS("_TtC6Liquid14AdditionalData")
@interface AdditionalData : NSObject
/// 追加情報(タイトル)
@property (nonatomic, readonly, copy) NSString * _Nonnull maintenanceTitle;
/// 追加情報(メッセージ)
@property (nonatomic, readonly, copy) NSString * _Nonnull maintenanceMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 生年の和暦西暦
typedef SWIFT_ENUM(NSInteger, BirthYearCalendarType, open) {
/// 和暦
  BirthYearCalendarTypeJapaneseCalendar = 1,
/// 西暦
  BirthYearCalendarTypeGregorianCalendar = 2,
};


enum Sex : NSInteger;
@class JapaneseForeignerJudgment;
@class MovedAbroad;
enum ResidenceCardInfoType : NSInteger;
enum ResidenceCardType : NSInteger;
@class UIImage;
@class ChipErrorData;

/// チップデータ
SWIFT_CLASS("_TtC6Liquid8ChipData")
@interface ChipData : NSObject
/// 氏名
@property (nonatomic, copy) NSString * _Nullable name;
/// 氏名（全角カナ）
@property (nonatomic, copy) NSString * _Nullable nameKana;
/// 氏名（半角カナ）
@property (nonatomic, copy) NSString * _Nullable nameHalfWidthKana;
/// 姓（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable lastNameKanaCandidates;
/// 姓（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable lastNameHalfWidthKanaCandidates;
/// 名（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable firstNameKanaCandidates;
/// 名（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable firstNameHalfWidthKanaCandidates;
/// 旧氏名
@property (nonatomic, copy) NSString * _Nullable previousName;
/// 旧姓（全角カナ）候補<br />
/// (nil: カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable previousLastNameKanaCandidates;
/// 旧姓（半角カナ）候補<br />
/// (nil:カナ氏名変換オプションの契約無し、もしくはカナ候補なし)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable previousLastNameHalfWidthKanaCandidates;
/// 生年月日
@property (nonatomic, copy) NSString * _Nullable birthday;
/// 住所
@property (nonatomic, copy) NSString * _Nullable address;
/// 本人確認書類番号
@property (nonatomic, copy) NSString * _Nullable idNumber;
/// 有効期限（西暦）
@property (nonatomic, copy) NSString * _Nullable expireDate;
/// 個人番号
@property (nonatomic, copy) NSString * _Nullable myNumber;
/// 郵便番号
@property (nonatomic, copy) NSString * _Nullable zipCode;
/// 性別 (Objective-C用)<br />
/// ・<code>sexValueIsValid</code> が <code>true</code> の場合、有効な値 <br />
/// 　 (<code>Sex.male</code>, <code>Sex.female</code>, <code>Sex.others</code> のいずれか)<br />
/// ・<code>sexValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum Sex sexValue;
/// 性別(<code>sexValue</code>) が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、性別(<code>sexValue</code>) の値は有効な値<br />
/// 　(<code>Sex.male</code>, <code>Sex.female</code>, <code>Sex.others</code> のいずれか)<br />
/// 　Swift用(<code>sex</code>)での <code>sex != nil</code> と同等
/// ・<code>false</code> の場合、性別(<code>sexValue</code>) の値は無効な値<br />
/// 　Swift用(<code>sex</code>)での <code>sex == nil</code> と同等
@property (nonatomic) BOOL sexValueIsValid;
/// 日本人/外国人判定<br />
/// ※推測値のため、日本人であっても判定結果で外国人が返却される場合（あるいはその逆）があります
@property (nonatomic, strong) JapaneseForeignerJudgment * _Nullable japaneseForeignerJudgment;
/// 国外転出有無
@property (nonatomic, strong) MovedAbroad * _Nullable movedAbroad;
/// 国外転出予定日
@property (nonatomic, copy) NSString * _Nullable plannedAbroadMoveDate;
/// 在留カードの裏面資格外活動包括許可欄
@property (nonatomic, copy) NSString * _Nullable residenceCardComprehensivePermission;
/// 在留カードの裏面資格外活動個別許可欄
@property (nonatomic, copy) NSString * _Nullable residenceCardIndividualPermission;
/// 在留カードの裏面在留期間等更新申請欄 (Objective-C用)<br />
/// ・<code>residenceCardUpdateStatusValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>true</code>: 申請中、<code>false</code>: 無し)<br />
/// ・<code>residenceCardUpdateStatusValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) BOOL residenceCardUpdateStatusValue;
/// 在留カードの裏面在留期間等更新申請欄(<code>residenceCardUpdateStatusValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardUpdateStatusValue</code> は有効な値<br />
/// 　(<code>true</code>: 申請中、<code>false</code>: 無し)<br />
/// 　Swift用(<code>residenceCardUpdateStatus</code>)での <code>residenceCardUpdateStatus != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardUpdateStatusValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardUpdateStatus</code>)での <code>residenceCardUpdateStatus == nil</code> と同等
@property (nonatomic) BOOL residenceCardUpdateStatusValueIsValid;
/// 在留カード／特別永住者証明書が保有している情報の種別 (Objective-C用)<br />
/// ・<code>residenceCardInfoTypeValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>ResidenceCardInfoType.normal</code>, <code>ResidenceCardInfoType.under_16</code>, <code>ResidenceCardInfoType.noCertificate</code> のいずれか)<br />
/// ・<code>residenceCardInfoTypeValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum ResidenceCardInfoType residenceCardInfoTypeValue;
/// 在留カード／特別永住者証明書が保有している情報の種別(<code>residenceCardInfoTypeValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardInfoTypeValue</code> は有効な値<br />
/// 　(<code>ResidenceCardInfoType.normal</code>, <code>ResidenceCardInfoType.under_16</code>, <code>ResidenceCardInfoType.noCertificate</code> のいずれか)<br />
/// 　Swift用(<code>residenceCardInfoType</code>)での <code>residenceCardInfoType != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardInfoTypeValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardInfoType</code>)での <code>residenceCardInfoType == nil</code> と同等
@property (nonatomic) BOOL residenceCardInfoTypeValueIsValid;
/// 在留カード／特別永住者証明書の種別 (Objective-C用)<br />
/// ・<code>residenceCardTypeValueIsValid</code> が <code>true</code> の場合、有効な値<br />
/// 　(<code>ResidenceCardType.undetected</code>, <code>ResidenceCardType.residenceCard</code>, <code>ResidenceCardType.specialPermanentResidentCertificate</code> のいずれか)<br />
/// ・<code>residenceCardTypeValueIsValid</code> が <code>false</code> の場合、無効な値
@property (nonatomic) enum ResidenceCardType residenceCardTypeValue;
/// 在留カード／特別永住者証明書の種別(<code>residenceCardTypeValue</code>)が有効な値かどうか (Objective-C用)<br />
/// ・<code>true</code> の場合、<code>residenceCardTypeValue</code> は有効な値<br />
/// 　(<code>ResidenceCardType.undetected</code>, <code>ResidenceCardType.residenceCard</code>, <code>ResidenceCardType.specialPermanentResidentCertificate</code> のいずれか)<br />
/// 　Swift用(<code>residenceCardType</code>)での <code>residenceCardType != nil</code> と同等<br />
/// ・<code>false</code> の場合、<code>residenceCardTypeValue</code> は無効な値<br />
/// 　Swift用(<code>residenceCardType</code>)での <code>residenceCardType == nil</code> と同等
@property (nonatomic) BOOL residenceCardTypeValueIsValid;
/// 券面顔写真
@property (nonatomic, strong) UIImage * _Nullable idFacePhoto;
/// 氏名の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull nameExternalCharacters;
/// 旧氏名の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull previousNameExternalCharacters;
/// 住所の外字画像
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull addressExternalCharacters;
/// 【非推奨】氏名の外字の有無を返却するメソッド
- (BOOL)existExternalCharInName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
/// 【非推奨】住所の外字の有無を返却するメソッド
- (BOOL)existExternalCharInAddress SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED;
/// 更新氏名の有無<br />
/// (true: 氏名の記載事項変更がある場合、false: 氏名の記載事項変更がない場合)
@property (nonatomic) BOOL isExistLatestName;
/// 更新住所の有無<br />
/// (true: 住所の記載事項変更がある場合、false: 住所の記載事項変更がない場合)
@property (nonatomic) BOOL isExistLatestAddress;
/// ICカード読取エラー関連情報<br />
/// 処理結果が以下の場合に返却される<br />
/// ・ICチップでPIN間違い “chip_pin_invalid” (詳細エラーコード= SE20015)
@property (nonatomic, strong) ChipErrorData * _Nullable chipErrorData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// ICカード読取エラー関連情報
SWIFT_CLASS("_TtC6Liquid13ChipErrorData")
@interface ChipErrorData : NSObject
/// ICカードに搭載されるチップのPIN照合ができる残回数<br />
/// ※残回数を超過した場合、チップがロックされます
@property (nonatomic, readonly) NSInteger attemptsRemainingUntilChipLocked;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

/// 各種画面のデザイン設定用
/// <pre>
/// 例: DesignSettingsBuilder()
///        .setPositiveButtonInactiveBgColor(ポジティブ非アクティブボタン背景色)
///        .setPositiveButtonActiveBgColor(ポジティブアクティブボタン背景色)
///        .setPositiveButtonFontColor(ポシティブボタン文字色)
///        .setNegativeButtonBgColor(ネガティブボタン背景色)
///        .setNegativeButtonFontColor(ネガティブボタン文字色)
///        .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid14DesignSettings")
@interface DesignSettings : NSObject
/// ポジティブボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonInactiveBgColor;
/// ポジティブボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonActiveBgColor;
/// ポジティブボタンの文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable positiveButtonFontColor;
/// ネガティブボタンの背景色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable negativeButtonBgColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 各種画面のデザイン設定用ビルダー
SWIFT_CLASS("_TtC6Liquid21DesignSettingsBuilder")
@interface DesignSettingsBuilder : NSObject
/// ポジティブボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonInactiveBgColor:(UIColor * _Nonnull)color;
/// ポジティブボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonActiveBgColor:(UIColor * _Nonnull)color;
/// ポジティブボタンの文字色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setPositiveButtonFontColor:(UIColor * _Nonnull)color;
/// ネガティブボタンの背景色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setNegativeButtonBgColor:(UIColor * _Nonnull)color;
/// ネガティブボタンの文字色<br/>※省略時はデフォルト設定を利用
- (DesignSettingsBuilder * _Nonnull)setNegativeButtonFontColor:(UIColor * _Nonnull)color;
///
- (DesignSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 画像(書類)
SWIFT_CLASS("_TtC6Liquid13DocumentImage")
@interface DocumentImage : NSObject
/// 書類 表面<br />
/// ※パスポートの場合は、顔写真のあるページの画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nonnull front;
/// 【非推奨】書類 厚み<br />
/// 厚みが存在し得ない方式(例: verifyIdDocument() の身元確認方式を “表面撮影方式（容貌あり）” で実行した場合）においては、“空のUIImage” が返ります<br />
/// それ以外は diagonalOrNil と同等です
@property (nonatomic, readonly, strong) UIImage * _Nonnull diagonal SWIFT_DEPRECATED;
/// 書類 厚み
@property (nonatomic, readonly, strong) UIImage * _Nullable diagonalOrNil;
/// 【非推奨】書類 裏面<br />
/// backOrNil と同等です<br />
/// ※パスポートの場合は、所持人記入欄の画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nullable back SWIFT_DEPRECATED;
/// 書類 裏面<br />
/// ※パスポートの場合は、所持人記入欄の画像が返ります
@property (nonatomic, readonly, strong) UIImage * _Nullable backOrNil;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// (運転免許証用の) 外字用オブジェクト
SWIFT_CLASS("_TtC6Liquid30DriverLicenseExternalCharacter")
@interface DriverLicenseExternalCharacter : NSObject
/// 外字のサイズ
@property (nonatomic, readonly) NSInteger size;
/// 外字の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull image;
/// コンストラクタ
/// \param size 外字のサイズ
///
/// \param image 外字の画像
///
- (nonnull instancetype)initWithSize:(NSInteger)size image:(NSData * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// パスワード
SWIFT_PROTOCOL("_TtP6Liquid20VerifyIdChipPassword_")
@protocol VerifyIdChipPassword
@end


/// パスワード・運転免許証用
SWIFT_CLASS("_TtC6Liquid21DriverLicensePassword")
@interface DriverLicensePassword : NSObject <VerifyIdChipPassword>
/// 暗証番号1
@property (nonatomic, readonly, copy) NSString * _Nonnull pin1;
/// 暗証番号2
@property (nonatomic, readonly, copy) NSString * _Nonnull pin2;
/// コンストラクタ
/// \param pin1 暗証番号1
///
/// \param pin2 暗証番号2
///
- (nonnull instancetype)initWithPin1:(NSString * _Nonnull)pin1 pin2:(NSString * _Nonnull)pin2 OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RAWデータ
SWIFT_CLASS("_TtC6Liquid9ICRawData")
@interface ICRawData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// RAWデータ・運転免許証用
SWIFT_CLASS("_TtC6Liquid20DriverLicenseRawData")
@interface DriverLicenseRawData : ICRawData
/// 記載事項（本籍除く）の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseEntriesRawData;
/// 記載事項（本籍）の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull registeredDomicileRawData;
/// 顔写真の署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull photoRawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 本人確認書類番号
@property (nonatomic, readonly, copy) NSString * _Nonnull idNumber;
/// 最新の変更履歴のうちの氏名
@property (nonatomic, readonly, copy) NSString * _Nullable newName;
/// 最新の変更履歴のうちの氏名に関わるカナ
@property (nonatomic, readonly, copy) NSString * _Nullable newNameKana;
/// 最新の変更履歴のうちの旧氏名<br />
/// ※記載事項変更された氏名に旧姓が付随している場合のみ、当項目を引き渡すこと
@property (nonatomic, readonly, copy) NSString * _Nullable newPreviousName;
/// 最新の変更履歴のうちの住所
@property (nonatomic, readonly, copy) NSString * _Nullable newAddress;
/// 氏名の外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterName;
/// 住所の外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterAddress;
/// 最新の変更履歴のうちの氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewName;
/// 署名対象の旧氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterPreviousName;
/// 最新の変更履歴のうちの旧氏名に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewPreviousName;
/// 最新の変更履歴のうちの住所に関わる外字のリスト
@property (nonatomic, readonly, copy) NSArray<DriverLicenseExternalCharacter *> * _Nullable externalCharacterNewAddress;
/// 更新氏名の有無
@property (nonatomic, copy) NSString * _Nullable isExistLatestName;
/// 更新住所の有無
@property (nonatomic, copy) NSString * _Nullable isExistLatestAddress;
/// コンストラクタ
/// \param licenseEntriesRawData 記載事項（本籍除く）の署名検証対象データ
///
/// \param registeredDomicileRawData 記載事項（本籍）の署名検証対象データ
///
/// \param photoRawData 顔写真の署名検証対象データ
///
/// \param photo 顔写真
///
/// \param idNumber 本人確認書類番号
///
/// \param newName 最新の変更履歴のうちの氏名
///
/// \param newNameKana 最新の変更履歴のうちの氏名に関わるカナ
///
/// \param newPreviousName 最新の変更履歴のうちの旧氏名
///
/// \param newAddress 最新の変更履歴のうちの住所
///
/// \param externalCharacterName 氏名の外字のリスト
///
/// \param externalCharacterAddress 住所の外字のリスト
///
/// \param externalCharacterNewName 最新の変更履歴のうちの氏名に関わる外字のリスト
///
/// \param externalCharacterPreviousName 署名対象の旧氏名に関わる外字のリスト
///
/// \param externalCharacterNewPreviousName 最新の変更履歴のうちの旧氏名に関わる外字のリスト
///
/// \param externalCharacterNewAddress 最新の変更履歴のうちの住所に関わる外字のリスト
///
/// \param isExistLatestName 更新氏名の有無
///
/// \param isExistLatestAddress 更新住所の有無
///
- (nonnull instancetype)initWithLicenseEntriesRawData:(NSString * _Nonnull)licenseEntriesRawData registeredDomicileRawData:(NSString * _Nonnull)registeredDomicileRawData photoRawData:(NSString * _Nonnull)photoRawData photo:(NSData * _Nonnull)photo idNumber:(NSString * _Nonnull)idNumber newName:(NSString * _Nullable)newName newNameKana:(NSString * _Nullable)newNameKana newPreviousName:(NSString * _Nullable)newPreviousName newAddress:(NSString * _Nullable)newAddress externalCharacterName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterName externalCharacterAddress:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterAddress externalCharacterNewName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewName externalCharacterPreviousName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterPreviousName externalCharacterNewPreviousName:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewPreviousName externalCharacterNewAddress:(NSArray<DriverLicenseExternalCharacter *> * _Nullable)externalCharacterNewAddress isExistLatestName:(NSString * _Nullable)isExistLatestName isExistLatestAddress:(NSString * _Nullable)isExistLatestAddress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Liveness;

/// 画像(本人容貌)
SWIFT_CLASS("_TtC6Liquid9FaceImage")
@interface FaceImage : NSObject
/// 本人容貌
@property (nonatomic, readonly, strong) UIImage * _Nonnull faceFront;
/// ライブネスチェック
@property (nonatomic, readonly, strong) Liveness * _Nonnull liveness;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum FacePhotoVerificationResult : NSInteger;

/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
SWIFT_CLASS("_TtC6Liquid21FacePhotoVerification")
@interface FacePhotoVerification : NSObject
/// 顔写真照合結果
@property (nonatomic, readonly) enum FacePhotoVerificationResult result;
/// 判定スコア値
@property (nonatomic, readonly) NSInteger score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 顔写真照合結果
typedef SWIFT_ENUM(NSInteger, FacePhotoVerificationResult, open) {
/// 高（他人受入率 1/100,000以下）
  FacePhotoVerificationResultHigh = 0,
/// 中（他人受入率 1/100,000～1/10,000）
  FacePhotoVerificationResultMiddle = 1,
/// 低（他人受入率 1/10,000以上）
  FacePhotoVerificationResultLow = 2,
};

enum FaceVerificationResult : NSInteger;

/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
SWIFT_CLASS("_TtC6Liquid16FaceVerification")
@interface FaceVerification : NSObject
/// 顔真贋確認結果
@property (nonatomic, readonly) enum FaceVerificationResult result;
/// 判定スコア値
@property (nonatomic, readonly) NSInteger score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
SWIFT_CLASS("_TtC6Liquid23FaceVerificationPassive")
@interface FaceVerificationPassive : NSObject
/// 顔真贋確認結果<br />
/// (true: 本物の顔、false: 偽物の顔)
@property (nonatomic, readonly) BOOL result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 顔真贋確認結果
typedef SWIFT_ENUM(NSInteger, FaceVerificationResult, open) {
/// 同一人物（他人受入率 1/100,000以下）
  FaceVerificationResultSame = 0,
/// 同一人物ではない可能性があります（1/10,000以下）
  FaceVerificationResultNotEqual = 1,
};

/// 判定方式
typedef SWIFT_ENUM(NSInteger, FaceVerificationType, open) {
/// アクティブ判定
  FaceVerificationTypeActive = 0,
/// パッシブ判定
  FaceVerificationTypePassive = 1,
};


/// ICカード(NFC) 読み取り状態
typedef SWIFT_ENUM(NSInteger, IdChipAvailabilityStatus, open) {
/// 対応<br />
/// ※NFC搭載あり
  IdChipAvailabilityStatusEnabled = 0,
/// 非対応<br />
/// ※NFC搭載なし
  IdChipAvailabilityStatusUnsupported = 1,
};

/// 本人確認書類種別
typedef SWIFT_ENUM(NSInteger, IdDocumentType, open) {
/// 運転免許証
  IdDocumentTypeDriverLicence = 1,
/// マイナンバーカード
  IdDocumentTypeMynumberCard = 2,
/// 在留カード
  IdDocumentTypeResidenceCard = 3,
/// パスポート（2020年2月3日以前）
  IdDocumentTypePassport = 4,
/// 特別永住者証明書
  IdDocumentTypeSpecialPermanentResidentCertificate = 5,
/// 運転経歴証明書
  IdDocumentTypeDriverLicenseHistory = 6,
/// 健康保険証
  IdDocumentTypeHealthInsuranceCard = 7,
/// 身体障害者手帳（紙様式）
  IdDocumentTypePhysicalDisabilityCertificateBook = 8,
/// 身体障害者手帳（カード様式）
  IdDocumentTypePhysicalDisabilityCertificateCard = 9,
/// 療育手帳（紙様式）
  IdDocumentTypeSpecialEducationBook = 10,
/// 療育手帳（カード様式）
  IdDocumentTypeSpecialEducationCard = 11,
/// 精神障害者保険福祉手帳（紙様式）
  IdDocumentTypeMentalDisabilityCertificateBook = 12,
/// 精神障害者保険福祉手帳（カード様式）
  IdDocumentTypeMentalDisabilityCertificateCard = 13,
/// 年金手帳<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypePensionBook = 14,
/// 基礎年金番号通知書<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeBasicPensionNumberNotification = 15,
/// パスポート（全期間）
  IdDocumentTypePassportAllPeriods = 16,
/// 住民基本台帳カード<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeBasicResidentRegistrationCard = 17,
/// 学生証<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeStudentIdCard = 18,
/// 学生手帳<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeStudentNotebook = 19,
/// 社員証<br />
/// ※非法令（法令準拠書類ではありません）
  IdDocumentTypeEmployeeIdCard = 21,
/// マイナンバーカード（＋個人番号）
  IdDocumentTypeMynumberCardWithMyNumber = 22,
};

/// 本人確認書類種別(公的個人認証用)
typedef SWIFT_ENUM(NSInteger, IdDocumentTypeJpki, open) {
/// マイナンバーカード
  IdDocumentTypeJpkiMynumberCard = 1,
/// マイナンバーカード（＋個人番号）
  IdDocumentTypeJpkiMynumberCardWithMyNumber = 2,
};


/// 【書類ファンクションの書類真贋判定利用時用】<br />「書類（表面）画像」の真贋判定結果
SWIFT_CLASS("_TtC6Liquid22IdDocumentVerification")
@interface IdDocumentVerification : NSObject
/// 書類真贋確認結果<br />
/// (true: 本物の書類、false: 偽物の書類の可能性が高い)
@property (nonatomic, readonly) BOOL result;
/// 判定スコア値
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証ファンクション（画面なし）用設定値
/// <pre>
/// 例:
/// let parameters = IdentifyIdChipNonInteractiveParametersBuilder(password: 署名用電子証明書のパスワード)
///     .setBase64TargetData(電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid38IdentifyIdChipNonInteractiveParameters")
@interface IdentifyIdChipNonInteractiveParameters : NSObject
/// 署名用電子証明書のパスワード
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
@property (nonatomic, readonly, copy) NSString * _Nullable base64TargetData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 公的個人認証ファンクション（画面なし）用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid45IdentifyIdChipNonInteractiveParametersBuilder")
@interface IdentifyIdChipNonInteractiveParametersBuilder : NSObject
/// 公的個人認証ファンクション（画面なし）用設定値ビルダー
/// \param password 署名用電子証明書のパスワード
///
- (nonnull instancetype)initWithPassword:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
- (IdentifyIdChipNonInteractiveParametersBuilder * _Nonnull)setBase64TargetData:(NSString * _Nullable)base64TargetData;
///
- (IdentifyIdChipNonInteractiveParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VerificationMethodJpki : NSInteger;

/// 公的個人認証ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = IdentifyIdChipParameters()
///     .setDocumentTypeJpki(本人確認書類種別(公的個人認証用))
///     .setVerificationMethodJpki(身元確認方式(公的個人認証用))
///     .setBase64TargetData(電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値)
///     .setEnabledChipForgotPin(「ICチップの暗証番号失念」機能の利用可否)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid24IdentifyIdChipParameters")
@interface IdentifyIdChipParameters : NSObject
/// 本人確認書類種別(公的個人認証用)<br />
/// ※省略可 (省略時は「マイナンバーカード」がデフォルト値)
@property (nonatomic, readonly) enum IdDocumentTypeJpki documentTypeJpki;
/// 身元確認方式(公的個人認証用)<br />
/// ※省略可 (省略時は「ワ対応」がデフォルト値)
@property (nonatomic, readonly) enum VerificationMethodJpki verificationMethodJpki;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
@property (nonatomic, readonly, copy) NSString * _Nullable base64TargetData;
/// 「ICチップの暗証番号失念」機能の利用可否<br />
/// (true: 「ICチップの暗証番号失念」ボタンを表示する【デフォルト値】、false: 「ICチップの暗証番号失念」ボタンを表示しない)
@property (nonatomic, readonly) BOOL enabledChipForgotPin;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 公的個人認証ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid31IdentifyIdChipParametersBuilder")
@interface IdentifyIdChipParametersBuilder : NSObject
/// 本人確認書類種別(公的個人認証用)<br />
/// ※省略可 (省略時は「マイナンバーカード」がデフォルト値)
- (IdentifyIdChipParametersBuilder * _Nonnull)setDocumentTypeJpki:(enum IdDocumentTypeJpki)documentTypeJpki;
/// 身元確認方式(公的個人認証用)<br />
/// ※省略可 (省略時は「ワ対応」がデフォルト値)
- (IdentifyIdChipParametersBuilder * _Nonnull)setVerificationMethodJpki:(enum VerificationMethodJpki)verificationMethodJpki;
/// 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
- (IdentifyIdChipParametersBuilder * _Nonnull)setBase64TargetData:(NSString * _Nullable)base64TargetData;
/// 「ICチップの暗証番号失念」機能の利用可否<br />
/// (true: 「ICチップの暗証番号失念」ボタンを表示する【デフォルト値】、false: 「ICチップの暗証番号失念」ボタンを表示しない)
- (IdentifyIdChipParametersBuilder * _Nonnull)setEnabledChipForgotPin:(BOOL)enabledChipForgotPin;
///
- (IdentifyIdChipParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ProcResult;
@class JpkiResult;
@class JpkiEvidence;

/// 公的個人認証ファンクションの結果
SWIFT_CLASS("_TtC6Liquid20IdentifyIdChipResult")
@interface IdentifyIdChipResult : NSObject
/// 処理結果
@property (nonatomic, strong) ProcResult * _Nonnull result;
/// 公的個人認証結果
@property (nonatomic, strong) JpkiResult * _Nonnull jpkiResult;
/// 公的個人認証証跡
@property (nonatomic, strong) JpkiEvidence * _Nonnull jpkiEvidence;
/// ICカード読取情報
@property (nonatomic, strong) ChipData * _Nullable chipData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 日本人/外国人判定<br />
/// ※推測値のため、日本人であっても判定結果で外国人が返却される場合（あるいはその逆）があります
SWIFT_CLASS("_TtC6Liquid25JapaneseForeignerJudgment")
@interface JapaneseForeignerJudgment : NSObject
/// 日本人
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) JapaneseForeignerJudgment * _Nonnull japanese;)
+ (JapaneseForeignerJudgment * _Nonnull)japanese SWIFT_WARN_UNUSED_RESULT;
+ (void)setJapanese:(JapaneseForeignerJudgment * _Nonnull)value;
/// 外国人
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) JapaneseForeignerJudgment * _Nonnull foreigner;)
+ (JapaneseForeignerJudgment * _Nonnull)foreigner SWIFT_WARN_UNUSED_RESULT;
+ (void)setForeigner:(JapaneseForeignerJudgment * _Nonnull)value;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証証跡
SWIFT_CLASS("_TtC6Liquid12JpkiEvidence")
@interface JpkiEvidence : NSObject
/// iTrust本人確認対象利用者識別番号
@property (nonatomic, copy) NSString * _Nullable uid;
/// 確認時刻
@property (nonatomic, copy) NSString * _Nullable asof;
/// 有効期間(開始)
@property (nonatomic, copy) NSString * _Nullable notBefore;
/// 有効期間(終了)
@property (nonatomic, copy) NSString * _Nullable notAfter;
/// 発行主体
@property (nonatomic, copy) NSString * _Nullable issuerDn;
/// 電子署名識別子
@property (nonatomic, copy) NSString * _Nullable signatureId;
/// 失効事由<br />
/// 0 - 有効<br />
/// 1 - 交付前に何らかの問題が発生したため破棄<br />
/// 2 - マイナンバーカードを紛失またはPINが漏洩等の理由での本人の申し出による利用停止<br />
/// 3 - CAの秘密鍵が漏洩<br />
/// 4 - 氏名、住所等の変更または本人の死亡、海外転出<br />
/// 5 - 通常記録されない失効事由。現況不明<br />
/// 6 - 海外転出等の理由での本人の申し出による利用停止<br />
/// 7 - マイナンバーカードを紛失またはPINが漏洩した疑いがあり本人の申し出による利用停止<br />
/// 8 - 不明な失効事由<br />
/// -1 - 公的個人認証が成功していないため、失効事由未取得
@property (nonatomic) NSInteger revokedReason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 公的個人認証結果
SWIFT_CLASS("_TtC6Liquid10JpkiResult")
@interface JpkiResult : NSObject
/// 電子署名の確認結果
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
@class UIViewController;
@class VerifyFaceResult;
@class VerifyFaceParameters;
@class VerifyIdDocumentResult;
enum VerificationMethod : NSInteger;
@class VerifyIdDocumentParameters;
@class VerifyIdChipParameters;
@class VerifyIdChipResult;
@class OcrResult;
@class TermsOfUseSettings;

/// Liquid SDKの機能を利用する窓口となるクラス
SWIFT_CLASS("_TtC6Liquid10LiquidEkyc")
@interface LiquidEkyc : NSObject
/// 初期化ファンクション<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param applicant Connector『LIQUID_eKYC_017_SDK本人確認申請API』に引き渡した連携ID
///
/// \param token Connector『LIQUID_eKYC_017_SDK本人確認申請API』から受け取った認証トークン
///
+ (void)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint applicant:(NSString * _Nonnull)applicant token:(NSString * _Nonnull)token;
/// 【非推奨】初期化ファンクション<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param token Connector『LIQUID_eKYC_017_SDK本人確認申請API』から受け取った認証トークン
///
/// \param applicant Connector『LIQUID_eKYC_017_SDK本人確認申請API』に引き渡した連携ID
///
/// \param apiKey SDK用APIキー
///
+ (void)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint token:(NSString * _Nonnull)token applicant:(NSString * _Nonnull)applicant apiKey:(NSString * _Nonnull)apiKey SWIFT_DEPRECATED;
/// 初期化ファンクション（評価版用）<br />
/// ・この処理でセッション情報の初期化が行われるので注意してください<br />
/// ・セッションの最中にこの処理が呼び出された場合、セッション中の情報は破棄されます
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param endpoint API の endpoint URL
///
/// \param apiKey SDK用APIキー
///
/// \param completion 処理終了時コールバック
///
///
/// returns:
/// 連携ID
+ (NSString * _Nonnull)startVerifyWithEndpoint:(NSURL * _Nonnull)endpoint apiKey:(NSString * _Nonnull)apiKey completion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// 【非推奨】本人容貌ファンクション
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyFaceOn:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyFaceResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 本人容貌ファンクション
/// \param verifyFaceParameters 本人容貌ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyFaceWithParameters:(VerifyFaceParameters * _Nonnull)verifyFaceParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyFaceResult * _Nonnull))completion;
/// 【非推奨】書類ファンクション（ホ対応用）
/// \param document 本人確認書類種別
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocument:(enum IdDocumentType)document on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 【非推奨】書類ファンクション
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocument:(enum IdDocumentType)document :(enum VerificationMethod)verificationMethod on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 書類ファンクション
/// \param verifyIdDocumentParameters 書類ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdDocumentWithParameters:(VerifyIdDocumentParameters * _Nonnull)verifyIdDocumentParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdDocumentResult * _Nonnull))completion;
/// 書類ICカードファンクション
/// \param verifyIdChipParameters 書類ICカードファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipWithParameters:(VerifyIdChipParameters * _Nonnull)verifyIdChipParameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 【非推奨】書類ICカードファンクション
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum IdDocumentType)document :(enum VerificationMethod)verificationMethod on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 【非推奨】書類ICカードファンクション（へ対応用）
/// \param document 本人確認書類種別
///
/// \param chipVerifyKey 電子署名検証用キー
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum IdDocumentType)document chipVerifyKey:(NSString * _Nonnull)chipVerifyKey on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 書類ICカードファンクション（署名検証のみ用）
/// \param verificationMethod 身元確認方式
///
/// \param showReviewScreen 確認画面の表示有無<br />(true: 撮影写真の確認画面を表示する、false: 撮影写真の確認画面を表示しない)<br />・身元確認方式が在留カードまたは特別永住者証明書を指定した場合のみ有効です<br />・身元確認方式がそれ以外の場合はいずれの値も無視します
///
/// \param signature 署名
///
/// \param verifyingParams 検証パラメータ
///
/// \param rawData RAWデータ<br />運転免許証時: DriverLicenseRawData<br/>マイナンバーカード時: MyNumberCardRawData<br/>在留カード時: ResidenceCardRawData<br/>特別永住者証明書時: SpecialPermanentResidentCertificateRawData
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChip:(enum VerificationMethod)verificationMethod showReviewScreen:(BOOL)showReviewScreen signature:(NSString * _Nonnull)signature verifyingParams:(NSString * _Nonnull)verifyingParams rawData:(ICRawData * _Nonnull)rawData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 書類ICカードファンクション（署名検証のみ用(在留/特別永住 裏面なし)）
/// \param verificationMethod 身元確認方式
///
/// \param signature 署名
///
/// \param verifyingParams 検証パラメータ
///
/// \param rawData RAWデータ<br />在留カード時: ResidenceCardRawData<br/>特別永住者証明書時: SpecialPermanentResidentCertificateRawData
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipExcludeBack:(enum VerificationMethod)verificationMethod signature:(NSString * _Nonnull)signature verifyingParams:(NSString * _Nonnull)verifyingParams rawData:(ICRawData * _Nonnull)rawData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
/// 【非推奨】公的個人認証ファンクション（ワ対応用）
/// \param base64TargetData 電子署名生成処理で使用する電子署名対象データをBASE64エンコードした値<br />※null/空文字可
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)identifyIdChip:(NSString * _Nullable)base64TargetData on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion SWIFT_DEPRECATED;
/// 公的個人認証ファンクション（ワ対応用）
/// \param parameters 公的個人認証ファンクション用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)identifyIdChipWithParameters:(IdentifyIdChipParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion;
///
+ (void)endVerify SWIFT_DEPRECATED;
/// アクティベートファンクション
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param completion 処理終了時コールバック
///
+ (void)activateWithCompletion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion;
/// OCR結果取得ファンクション
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
/// \param completion 処理終了時コールバック
///
+ (void)getOcrResultsWithCompletion:(void (^ _Nonnull)(OcrResult * _Nonnull))completion;
/// 利用規約ファンクション
/// \param termsOfUseSettings 利用規約画面のデザイン設定用<br />※引数指定例: TermsOfUseSettings(headerFontColor: .blue, screenBgColor: .cyan, prefaceFontColor: .red, buttonInactiveBgColor: .black, buttonActiveBgColor: .green, buttonFontColor: .gray)
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)showTermsOfUseWithSettings:(TermsOfUseSettings * _Nullable)termsOfUseSettings on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(ProcResult * _Nonnull))completion;
/// デザイン設定ファンクション
/// \param designSettings 各種画面のデザイン設定用
///
+ (void)customizeDesign:(DesignSettings * _Nonnull)designSettings;
/// バージョン取得ファンクション<br />
/// ・初期化ファンクション実行前でも利用可能です
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
///
/// returns:
/// バージョン
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// ICカード読み取り可否ファンクション<br />
/// ・初期化ファンクション実行前でも利用可能です
+ (enum IdChipAvailabilityStatus)checkIdChipAvailability SWIFT_WARN_UNUSED_RESULT;
@end


@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// 公的個人認証ファンクション（画面なし）（ワ対応用）
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     parameters: 公的個人認証ファンクション（画面なし）用設定値
///   </li>
///   <li>
///     viewController: 指定された viewController 上で画面が表示されます
///   </li>
///   <li>
///     completion: ファンクションの処理結果が返ります
///   </li>
/// </ul>
+ (void)identifyIdChipNonInteractiveWithParameters:(IdentifyIdChipNonInteractiveParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(IdentifyIdChipResult * _Nonnull))completion;
@end

@class VerifyIdChipNonInteractiveParameters;

@interface LiquidEkyc (SWIFT_EXTENSION(Liquid))
/// 書類ICカードファンクション（画面なし）
/// \param verifyIdChipNonInteractiveParameters 書類ICカードファンクション（画面なし）用設定値
///
/// \param viewController 指定された viewController 上で画面が表示されます
///
/// \param completion ファンクションの処理結果が返ります
///
+ (void)verifyIdChipNonInteractive:(VerifyIdChipNonInteractiveParameters * _Nonnull)parameters on:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(VerifyIdChipResult * _Nonnull))completion;
@end


/// ライブネスチェック
SWIFT_CLASS("_TtC6Liquid8Liveness")
@interface Liveness : NSObject
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern1;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern2;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern3;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern4;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern5;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern6;
/// 含まれる画像については『LIQUID eKYC Applicant SDK版インタフェース仕様書(SDK Interface Specifications)』をご確認ください
@property (nonatomic, readonly, strong) UIImage * _Nonnull pattern7;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 国外転出有無
SWIFT_CLASS("_TtC6Liquid11MovedAbroad")
@interface MovedAbroad : NSObject
/// 不明（マイナンバーカードの国外転出継続利用対応以前のデータ）
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull unknown;)
+ (MovedAbroad * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
+ (void)setUnknown:(MovedAbroad * _Nonnull)value;
/// 国外転出無し
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull no;)
+ (MovedAbroad * _Nonnull)no SWIFT_WARN_UNUSED_RESULT;
+ (void)setNo:(MovedAbroad * _Nonnull)value;
/// 国外転出有り
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MovedAbroad * _Nonnull yes;)
+ (MovedAbroad * _Nonnull)yes SWIFT_WARN_UNUSED_RESULT;
+ (void)setYes:(MovedAbroad * _Nonnull)value;
///
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// パスワード・マイナンバーカード用
SWIFT_CLASS("_TtC6Liquid20MyNumberCardPassword")
@interface MyNumberCardPassword : NSObject <VerifyIdChipPassword>
/// 照合番号B
@property (nonatomic, readonly, copy) NSString * _Nonnull password;
/// 生年の和暦西暦
@property (nonatomic, readonly) enum BirthYearCalendarType birthYearCalendarType;
/// コンストラクタ
/// \param password 照合番号B
///
/// \param birthYearCalendarType 生年の和暦西暦
///
- (nonnull instancetype)initWithPassword:(NSString * _Nonnull)password birthYearCalendarType:(enum BirthYearCalendarType)birthYearCalendarType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// RAWデータ・マイナンバーカード用
SWIFT_CLASS("_TtC6Liquid19MyNumberCardRawData")
@interface MyNumberCardRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 有効期限（西暦）
@property (nonatomic, readonly, copy) NSString * _Nonnull expireDate;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param expireData 有効期限（西暦）
///
/// \param photo 顔写真
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData expireData:(NSString * _Nonnull)expireData photo:(NSData * _Nonnull)photo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// OCR結果
SWIFT_CLASS("_TtC6Liquid14OcrAcquisition")
@interface OcrAcquisition : NSObject
/// 氏名
@property (nonatomic, copy) NSString * _Nullable name;
/// 生年月日
@property (nonatomic, copy) NSString * _Nullable birthday;
/// 住所
@property (nonatomic, copy) NSString * _Nullable address;
/// 本人確認書類番号
@property (nonatomic, copy) NSString * _Nullable idNumber;
/// 有効期限（西暦）
@property (nonatomic, copy) NSString * _Nullable expireDate;
/// 国籍<br />
/// ※ISO 3166-1 alpha-2形式
@property (nonatomic, copy) NSString * _Nullable nationality;
/// 性別<br />
/// ※1:男性, 2:女性, 9:その他
@property (nonatomic, copy) NSString * _Nullable sex;
/// 郵便番号
@property (nonatomic, copy) NSString * _Nullable zipCode;
/// 住所 (都道府県)
@property (nonatomic, copy) NSString * _Nullable addressPref;
/// 住所 (市区町村)
@property (nonatomic, copy) NSString * _Nullable addressCity;
/// 住所 (その他)
@property (nonatomic, copy) NSString * _Nullable addressOther;
/// 運転免許証種類
@property (nonatomic, copy) NSArray<NSString *> * _Nullable driversLicenseTypes;
/// 備考記載有無<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:備考記載無し、1:備考記載あり、null:変更検知オプションの契約無し、もしくはOCR失敗
@property (nonatomic, copy) NSString * _Nullable remarksExist;
/// 在留資格
@property (nonatomic, copy) NSString * _Nullable residentStatus;
/// 在留期間
@property (nonatomic, copy) NSString * _Nullable stayPeriod;
/// 満了日
@property (nonatomic, copy) NSString * _Nullable stayExpireDate;
/// 許可年月日
@property (nonatomic, copy) NSString * _Nullable permittedDate;
/// 許可の種類
@property (nonatomic, copy) NSString * _Nullable kindOfPermission;
/// 就労制限の有無
@property (nonatomic, copy) NSString * _Nullable employmentRestriction;
/// 交付年月日
@property (nonatomic, copy) NSString * _Nullable issueDate;
/// 氏名変更フラグ<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:氏名の記載事項変更がない場合、1:氏名の記載事項変更がある場合、もしくは住所変更以外のなんらかの記載あり、nil:変更検知オプションの契約無し
@property (nonatomic, copy) NSString * _Nullable nameChanged;
/// 住所変更フラグ<br />
/// OCRの変更検知オプションを契約している場合のみ返却される<br />
/// ※0:住所の記載事項変更がない場合、1:住所の記載事項変更がある場合、もしくは氏名変更以外のなんらかの記載あり、nil:変更検知オプションの契約無し
@property (nonatomic, copy) NSString * _Nullable addressChanged;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// OCR結果取得ファンクションの結果
SWIFT_CLASS("_TtC6Liquid9OcrResult")
@interface OcrResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// OCR結果
@property (nonatomic, readonly, strong) OcrAcquisition * _Nullable ocr;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ResultStatus : NSInteger;

/// 処理結果
SWIFT_CLASS("_TtC6Liquid10ProcResult")
@interface ProcResult : NSObject
/// エラー種別
@property (nonatomic, readonly) enum ResultStatus status;
/// 詳細エラーコード
@property (nonatomic, readonly, copy) NSString * _Nonnull resultCode;
/// 追加情報
@property (nonatomic, readonly, strong) AdditionalData * _Nullable additionalData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 在留カード／特別永住者証明書が保有している情報の種別
typedef SWIFT_ENUM(NSInteger, ResidenceCardInfoType, open) {
/// 通常
  ResidenceCardInfoTypeNormal = 0,
/// 16歳未満（16歳の誕生日の半年前に交付されたカードを除く）のデータ
  ResidenceCardInfoTypeUnder_16 = 1,
/// チェックコード、公開鍵証明書が無いデータ
  ResidenceCardInfoTypeNoCertificate = 2,
};


/// RAWデータ・在留カード
SWIFT_CLASS("_TtC6Liquid20ResidenceCardRawData")
@interface ResidenceCardRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 券面(表)の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull frontDocumentImage;
/// 裏面在留期間等更新申請欄
@property (nonatomic, readonly) BOOL residenceCardUpdateStatus;
/// 在留カード／特別永住者証明書が保有している情報の種別
@property (nonatomic, readonly) NSInteger residenceCardInfoType;
/// 在留カード／特別永住者証明書の種別
@property (nonatomic, readonly) NSInteger residenceCardType;
/// 裏面資格外活動包括許可欄
@property (nonatomic, readonly, copy) NSString * _Nullable residenceCardComprehensivePermission;
/// 裏面資格外活動個別許可欄
@property (nonatomic, readonly, copy) NSString * _Nullable residenceCardIndividualPermission;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param photo 顔写真
///
/// \param frontDocumentImage 券面(表)の画像
///
/// \param residenceCardUpdateStatus 裏面在留期間等更新申請欄
///
/// \param residenceCardInfoType 在留カード／特別永住者証明書が保有している情報の種別
///
/// \param residenceCardType 在留カード／特別永住者証明書の種別
///
/// \param residenceCardComprehensivePermission 裏面資格外活動包括許可欄
///
/// \param residenceCardIndividualPermission 裏面資格外活動個別許可欄
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData photo:(NSData * _Nonnull)photo frontDocumentImage:(NSData * _Nonnull)frontDocumentImage residenceCardUpdateStatus:(BOOL)residenceCardUpdateStatus residenceCardInfoType:(NSInteger)residenceCardInfoType residenceCardType:(NSInteger)residenceCardType residenceCardComprehensivePermission:(NSString * _Nullable)residenceCardComprehensivePermission residenceCardIndividualPermission:(NSString * _Nullable)residenceCardIndividualPermission OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 在留カード／特別永住者証明書の種別
typedef SWIFT_ENUM(NSInteger, ResidenceCardType, open) {
/// 未検出
  ResidenceCardTypeUndetected = 0,
/// 在留カード
  ResidenceCardTypeResidenceCard = 1,
/// 特別永住者証明書
  ResidenceCardTypeSpecialPermanentResidentCertificate = 2,
};

/// 全ファンクションのエラー種別
typedef SWIFT_ENUM(NSInteger, ResultStatus, open) {
/// 正常時 “success”
  ResultStatusSuccess = 0,
/// サーバーメンテナンス時 “maintenance”
  ResultStatusMaintenance = 1,
/// パーミッション不足 “permission_not_allowed”
  ResultStatusPermissionNotAllowed = 2,
/// 画面タイムアウト “screen_timeout”
  ResultStatusScreenTimeout = 3,
/// セッションタイムアウト “session_timeout”
  ResultStatusSessionTimeout = 4,
/// OCR未完了 “ocr_in_progress”
  ResultStatusOcrInProgress = 5,
/// OCR利用不可 “ocr_unsupported”
  ResultStatusOcrUnSupported = 6,
/// ユーザー中断 “user_cancel”
  ResultStatusUserCancel = 7,
/// エラー終了 “error”
  ResultStatusError = 8,
/// ICチップがロック状態 “chip_locked”
  ResultStatusChipLocked = 9,
/// ICチップが特殊 “chip_unusual”
  ResultStatusChipUnusual = 10,
/// ICチップが特殊（更新情報あり） “chip_unusual_updated”
  ResultStatusChipUnusualUpdated = 11,
/// ICチップの電子署名の検証に失敗 “chip_verify_failure”
  ResultStatusChipVerifyFailure = 12,
/// ICチップが特殊（在留カード／特別永住者証明書） “chip_unusual_residencecard”
  ResultStatusChipUnusualResidencecard = 13,
/// ICチップの外字画像が欠字 “chip_missing_external_char”
  ResultStatusChipMissingExternalChar = 14,
/// 非対応端末(ICチップ理由) “unsupported_chip”
  ResultStatusUnsupportedChip = 15,
/// ICチップ(ただし在留カード／特別永住者証明書)でPIN間違い許容回数超過 “chip_pin_failure”
  ResultStatusChipPinFailure = 16,
/// ICチップが有効期限切れ “chip_expired”
  ResultStatusChipExpired = 17,
/// ICチップの暗証番号失念 “chip_forgot_pin”
  ResultStatusChipForgotPin = 18,
/// 公的個人認証が否認 “chip_identify_denied”
  ResultStatusChipIdentifyDenied = 19,
/// 公的個人認証がエラー終了 “chip_identify_error”
  ResultStatusChipIdentifyError = 20,
/// 利用規約未同意 “terms_do_not_agree”
  ResultStatusTermsDoNotAgree = 21,
/// 通信失敗 “communication_failure”
  ResultStatusCommunicationFailure = 22,
/// ICチップでPIN間違い “chip_pin_invalid”
  ResultStatusChipPinInvalid = 23,
/// ICチップの読み取り失敗 “chip_read_error”
  ResultStatusChipReadError = 24,
};

/// 性別
typedef SWIFT_ENUM(NSInteger, Sex, open) {
/// 男性
  SexMale = 0,
/// 女性
  SexFemale = 1,
/// その他
  SexOthers = 2,
};


/// RAWデータ・特別永住者証明書用
SWIFT_CLASS("_TtC6Liquid42SpecialPermanentResidentCertificateRawData")
@interface SpecialPermanentResidentCertificateRawData : ICRawData
/// 署名検証対象データ
@property (nonatomic, readonly, copy) NSString * _Nonnull rawData;
/// 顔写真
@property (nonatomic, readonly, copy) NSData * _Nonnull photo;
/// 券面(表)の画像
@property (nonatomic, readonly, copy) NSData * _Nonnull frontDocumentImage;
/// 在留カード／特別永住者証明書が保有している情報の種別
@property (nonatomic, readonly) NSInteger residenceCardInfoType;
/// 在留カード／特別永住者証明書の種別
@property (nonatomic, readonly) NSInteger residenceCardType;
/// コンストラクタ
/// \param rawData 署名検証対象データ
///
/// \param photo 顔写真
///
/// \param frontDocumentImage 券面(表)の画像
///
/// \param residenceCardInfoType 在留カード／特別永住者証明書が保有している情報の種別
///
/// \param residenceCardType 在留カード／特別永住者証明書の種別
///
- (nonnull instancetype)initWithRawData:(NSString * _Nonnull)rawData photo:(NSData * _Nonnull)photo frontDocumentImage:(NSData * _Nonnull)frontDocumentImage residenceCardInfoType:(NSInteger)residenceCardInfoType residenceCardType:(NSInteger)residenceCardType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 利用規約画面のデザイン設定用
SWIFT_CLASS("_TtC6Liquid18TermsOfUseSettings")
@interface TermsOfUseSettings : NSObject
/// ヘッダー部の文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable headerFontColor;
/// 画面全体の背景色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable screenBgColor;
/// 冒頭文章の文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable prefaceFontColor;
/// 末端ボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonInactiveBgColor;
/// 末端ボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonActiveBgColor;
/// 末端ボタンの文字色<br/>※省略時はデフォルト設定を利用
@property (nonatomic, readonly, strong) UIColor * _Nullable buttonFontColor;
/// コンストラクタ
/// \param headerFontColor ヘッダー部の文字色<br/>※省略時はデフォルト設定を利用
///
/// \param screenBgColor 画面全体の背景色<br/>※省略時はデフォルト設定を利用
///
/// \param prefaceFontColor 冒頭文章の文字色<br/>※省略時はデフォルト設定を利用
///
/// \param buttonInactiveBgColor 末端ボタンの背景色(非アクティブ時)<br/>※省略時はデフォルト設定を利用
///
/// \param buttonActiveBgColor 末端ボタンの背景色(アクティブ時)<br/>※省略時はデフォルト設定を利用
///
/// \param buttonFontColor 末端ボタンの文字色<br/>※省略時はデフォルト設定を利用
///
- (nonnull instancetype)initWithHeaderFontColor:(UIColor * _Nullable)headerFontColor screenBgColor:(UIColor * _Nullable)screenBgColor prefaceFontColor:(UIColor * _Nullable)prefaceFontColor buttonInactiveBgColor:(UIColor * _Nullable)buttonInactiveBgColor buttonActiveBgColor:(UIColor * _Nullable)buttonActiveBgColor buttonFontColor:(UIColor * _Nullable)buttonFontColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



















/// 身元確認方式
typedef SWIFT_ENUM(NSInteger, VerificationMethod, open) {
/// ヘ対応
  VerificationMethodComplyHe = 1,
/// 非法令 IC読取対応（電子署名検証なし・本人容貌あり）
  VerificationMethodReadFace = 2,
/// ト対応
  VerificationMethodComplyTo = 3,
/// チ対応
  VerificationMethodComplyChi = 4,
/// 非法令 IC読取対応（電子署名検証なし・本人容貌なし）
  VerificationMethodRead = 5,
/// ホ対応
  VerificationMethodComplyHo = 6,
/// 表面撮影方式（容貌あり）
  VerificationMethodFrontFace = 7,
/// 表面撮影方式（容貌なし）
  VerificationMethodFront = 8,
/// 表裏面撮影方式（容貌あり）
  VerificationMethodFrontBackFace = 9,
/// 表裏面撮影方式（容貌なし）
  VerificationMethodFrontBack = 10,
};

/// 身元確認方式(公的個人認証用)
typedef SWIFT_ENUM(NSInteger, VerificationMethodJpki, open) {
/// ワ対応
  VerificationMethodJpkiComplyWa = 1,
/// JPKI+（容貌）
  VerificationMethodJpkiFaceJpki = 2,
};


/// 本人容貌ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyFaceParametersBuilder()
///    .setShowReviewScreen(確認画面の表示有無)
///    .setFaceVerificationType(判定方式)
///    .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid20VerifyFaceParameters")
@interface VerifyFaceParameters : NSObject
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
/// 判定方式<br />
/// (アクティブ判定【デフォルト値】、パッシブ判定）
@property (nonatomic, readonly) enum FaceVerificationType faceVerificationType;
/// Liquid指定 特殊用途事業者のみ設定
@property (nonatomic, readonly, copy) NSString * _Nonnull controlCharacter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 本人容貌ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid27VerifyFaceParametersBuilder")
@interface VerifyFaceParametersBuilder : NSObject
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyFaceParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
/// 判定方式<br />
/// (アクティブ判定【デフォルト値】、パッシブ判定）
- (VerifyFaceParametersBuilder * _Nonnull)setFaceVerificationType:(enum FaceVerificationType)verifyType;
/// Liquid指定 特殊用途事業者のみ設定
- (VerifyFaceParametersBuilder * _Nonnull)setControlCharacter:(NSString * _Nonnull)controlCharacter;
///
- (VerifyFaceParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 本人容貌ファンクションの結果
SWIFT_CLASS("_TtC6Liquid16VerifyFaceResult")
@interface VerifyFaceResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, readonly, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, readonly, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, readonly, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 画像(本人容貌)
@property (nonatomic, readonly, strong) FaceImage * _Nullable faceImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション（画面なし）用設定値
/// <pre>
/// 例: 運転免許証時
/// let parameters = VerifyIdChipNonInteractiveParametersBuilder(password: DriverLicensePassword(暗証番号1, 暗証番号2))
///     .build()
///
/// 例: マイナンバーカード時
/// let parameters = VerifyIdChipNonInteractiveParametersBuilder(password: MyNumberCardPassword(照合番号B, 生年の和暦西暦))
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid36VerifyIdChipNonInteractiveParameters")
@interface VerifyIdChipNonInteractiveParameters : NSObject
/// パスワード<br />
/// 運転免許証時: DriverLicensePassword<br/>
/// マイナンバーカード時: MyNumberCardPassword
@property (nonatomic, readonly, strong) id <VerifyIdChipPassword> _Nonnull password;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション（画面なし）用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid43VerifyIdChipNonInteractiveParametersBuilder")
@interface VerifyIdChipNonInteractiveParametersBuilder : NSObject
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     password: パスワード<br/>
///     運転免許証時: DriverLicensePassword<br/>
///     マイナンバーカード時: MyNumberCardPassword
///   </li>
/// </ul>
- (nonnull instancetype)initWithPassword:(id <VerifyIdChipPassword> _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
///
- (VerifyIdChipNonInteractiveParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyIdChipParametersBuilder(document: 本人確認書類種別, verificationMethod: 身元確認方式)
///     .setShowReviewScreen(確認画面の表示有無)
///     .build()
///  </pre>
SWIFT_CLASS("_TtC6Liquid22VerifyIdChipParameters")
@interface VerifyIdChipParameters : NSObject
/// 本人確認書類種別
@property (nonatomic, readonly) enum IdDocumentType document;
/// 身元確認方式
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ICカードファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid29VerifyIdChipParametersBuilder")
@interface VerifyIdChipParametersBuilder : NSObject
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     document: 本人確認書類種別
///   </li>
///   <li>
///     verificationMethod: 身元確認方式
///   </li>
/// </ul>
- (nonnull instancetype)initWithDocument:(enum IdDocumentType)document verificationMethod:(enum VerificationMethod)verificationMethod OBJC_DESIGNATED_INITIALIZER;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyIdChipParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
///
- (VerifyIdChipParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// 書類ICカードファンクションの結果
SWIFT_CLASS("_TtC6Liquid18VerifyIdChipResult")
@interface VerifyIdChipResult : NSObject
/// 処理結果
@property (nonatomic, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 画像(書類)
@property (nonatomic, strong) DocumentImage * _Nullable documentImage;
/// ICカード読取情報
@property (nonatomic, strong) ChipData * _Nullable chipData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクション用設定値
/// <pre>
/// 例:
/// let parameters = VerifyIdDocumentParametersBuilder(document: 本人確認書類種別, verificationMethod: 身元確認方式)
///     .setShowReviewScreen(確認画面の表示有無)
///     .setUseIdDocumentVerification(書類真贋判定)
///     .build()
/// </pre>
SWIFT_CLASS("_TtC6Liquid26VerifyIdDocumentParameters")
@interface VerifyIdDocumentParameters : NSObject
/// 本人確認書類種別
@property (nonatomic, readonly) enum IdDocumentType document;
/// 身元確認方式
@property (nonatomic, readonly) enum VerificationMethod verificationMethod;
/// 確認画面の表示有無<br />
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
@property (nonatomic, readonly) BOOL showReviewScreen;
/// 書類真贋判定<br />
/// (true: 利用する、false: 利用しない【デフォルト値】)
@property (nonatomic, readonly) BOOL useIdDocumentVerification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクション用設定値ビルダー
SWIFT_CLASS("_TtC6Liquid33VerifyIdDocumentParametersBuilder")
@interface VerifyIdDocumentParametersBuilder : NSObject
/// \param document 本人確認書類種別
///
/// \param verificationMethod 身元確認方式
///
- (nonnull instancetype)initWithDocument:(enum IdDocumentType)document verificationMethod:(enum VerificationMethod)verificationMethod OBJC_DESIGNATED_INITIALIZER;
/// 確認画面の表示有無<br >
/// (true: 撮影写真の確認画面を表示する【デフォルト値】、false: 撮影写真の確認画面を表示しない)
- (VerifyIdDocumentParametersBuilder * _Nonnull)setShowReviewScreen:(BOOL)showReviewScreen;
/// 書類真贋判定<br />
/// (true: 利用する、false: 利用しない【デフォルト値】)
- (VerifyIdDocumentParametersBuilder * _Nonnull)setUseIdDocumentVerification:(BOOL)useIdDocumentVerification;
///
- (VerifyIdDocumentParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 書類ファンクションの結果
SWIFT_CLASS("_TtC6Liquid22VerifyIdDocumentResult")
@interface VerifyIdDocumentResult : NSObject
/// 処理結果
@property (nonatomic, readonly, strong) ProcResult * _Nonnull result;
/// 「本人容貌」画像と「本人確認書類の顔写真」画像の同一判定結果
@property (nonatomic, readonly, strong) FacePhotoVerification * _Nullable facePhotoVerification;
/// 【本人容貌ファンクションのアクティブ判定利用時用】<br />「本人容貌」画像と「ライブネス判定」画像の同一判定結果
@property (nonatomic, readonly, strong) FaceVerification * _Nullable faceVerification;
/// 【本人容貌ファンクションのパッシブ判定利用時用】<br />「本人容貌」画像の真贋判定結果
@property (nonatomic, readonly, strong) FaceVerificationPassive * _Nullable faceVerificationPassive;
/// 【書類ファンクションの書類真贋判定利用時用】<br />「書類（表面）画像」の真贋判定結果
@property (nonatomic, readonly, strong) IdDocumentVerification * _Nullable idDocumentVerification;
/// 画像(書類)
@property (nonatomic, readonly, strong) DocumentImage * _Nullable documentImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
