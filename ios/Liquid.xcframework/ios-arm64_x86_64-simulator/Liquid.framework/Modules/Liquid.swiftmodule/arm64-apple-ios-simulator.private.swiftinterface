// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Liquid
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation.AVCaptureVideoDataOutput
import AVFoundation.AVCaptureVideoPreviewLayer
import AVFoundation
import AVKit
import Accelerate
import CoreGraphics.CGGeometry
import CoreGraphics.CGImage
import CoreImage.CIImage
import CoreMedia.CMSampleBuffer
import CoreVideo.CVPixelBuffer
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreMedia
import CoreMotion
import CoreNFC
import CoreVideo
import DeveloperToolsSupport
import Foundation
import ItrustEkycLibrary
@_exported import Liquid
// import LiquidGraphicsAuthor
import MobileCoreServices
import Security
import Swift
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class AddressModificationHistory : ObjectiveC.NSObject {
  @objc final public let address: Swift.String
  @objc deinit
}
@objc public enum BirthYearCalendarType : Swift.Int {
  case japaneseCalendar = 1
  case gregorianCalendar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class CaptureOptionalDocumentParameters : ObjectiveC.NSObject {
  @objc final public let seqNo: Swift.Int
  @objc final public let maxPages: Swift.Int
  @objc final public let optionalDocumentType: Swift.String
  @objc final public let optionalDocumentName: [Swift.String : Swift.String]
  @objc deinit
}
@objc public class CaptureOptionalDocumentParametersBuilder : ObjectiveC.NSObject {
  @objc public init(seqNo: Swift.Int, maxPages: Swift.Int, optionalDocumentType: Swift.String, optionalDocumentName: [Swift.String : Swift.String])
  @objc public func build() -> Liquid.CaptureOptionalDocumentParameters
  @objc deinit
}
@objc public class CardInfoInputAssistanceCredential : ObjectiveC.NSObject, Liquid.WithMyNumberCredential {
  @objc final public let pin: Swift.String
  @objc public init(pin: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ChipData : ObjectiveC.NSObject {
  @objc public var name: Swift.String?
  @objc public var nameKana: Swift.String?
  @objc public var nameHalfWidthKana: Swift.String?
  @objc public var lastNameKanaCandidates: [Swift.String]?
  @objc public var lastNameHalfWidthKanaCandidates: [Swift.String]?
  @objc public var firstNameKanaCandidates: [Swift.String]?
  @objc public var firstNameHalfWidthKanaCandidates: [Swift.String]?
  @objc public var previousName: Swift.String?
  @objc public var previousLastNameKanaCandidates: [Swift.String]?
  @objc public var previousLastNameHalfWidthKanaCandidates: [Swift.String]?
  @objc public var birthday: Swift.String?
  @objc public var address: Swift.String?
  @objc public var addressModificationHistories: [Liquid.AddressModificationHistory]?
  @objc public var idNumber: Swift.String?
  @objc public var expireDate: Swift.String?
  @objc public var myNumber: Swift.String?
  @objc public var myNumberCardIntegratedDriverLicenseData: Liquid.MyNumberCardIntegratedDriverLicenseData?
  @objc public var zipCode: Swift.String?
  @nonobjc public var sex: Liquid.Sex?
  @available(swift, deprecated: 1.0, renamed: "sex")
  @objc public var sexValue: Liquid.Sex {
    @objc get
    @objc set
  }
  @available(swift, deprecated: 1.0, renamed: "sex")
  @objc public var sexValueIsValid: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var japaneseForeignerJudgment: Liquid.JapaneseForeignerJudgment?
  @objc public var movedAbroad: Liquid.MovedAbroad?
  @objc public var plannedAbroadMoveDate: Swift.String?
  @objc public var residenceCardComprehensivePermission: Swift.String?
  @objc public var residenceCardIndividualPermission: Swift.String?
  @nonobjc public var residenceCardUpdateStatus: Swift.Bool?
  @available(swift, deprecated: 1.0, renamed: "residenceCardUpdateStatus")
  @objc public var residenceCardUpdateStatusValue: Swift.Bool {
    @objc get
    @objc set
  }
  @available(swift, deprecated: 1.0, renamed: "residenceCardUpdateStatus")
  @objc public var residenceCardUpdateStatusValueIsValid: Swift.Bool {
    @objc get
    @objc set
  }
  @nonobjc public var residenceCardInfoType: Liquid.ResidenceCardInfoType?
  @available(swift, deprecated: 1.0, renamed: "residenceCardInfoType")
  @objc public var residenceCardInfoTypeValue: Liquid.ResidenceCardInfoType {
    @objc get
    @objc set
  }
  @available(swift, deprecated: 1.0, renamed: "residenceCardInfoType")
  @objc public var residenceCardInfoTypeValueIsValid: Swift.Bool {
    @objc get
    @objc set
  }
  @nonobjc public var residenceCardType: Liquid.ResidenceCardType?
  @available(swift, deprecated: 1.0, renamed: "residenceCardType")
  @objc public var residenceCardTypeValue: Liquid.ResidenceCardType {
    @objc get
    @objc set
  }
  @available(swift, deprecated: 1.0, renamed: "residenceCardType")
  @objc public var residenceCardTypeValueIsValid: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var idFacePhoto: UIKit.UIImage?
  @objc public var nameExternalCharacters: [UIKit.UIImage]
  @objc public var nameImage: UIKit.UIImage?
  @objc public var previousNameExternalCharacters: [UIKit.UIImage]
  @objc public var addressExternalCharacters: [UIKit.UIImage]
  @objc public var addressImage: UIKit.UIImage?
  @available(*, deprecated)
  @objc public func existExternalCharInName() -> Swift.Bool
  @available(*, deprecated)
  @objc public func existExternalCharInAddress() -> Swift.Bool
  @objc public var isExistLatestName: Swift.Bool
  @objc public var isExistLatestAddress: Swift.Bool
  @objc public var chipErrorData: Liquid.ChipErrorData?
  @objc deinit
}
@objc public enum ChipErrorCredentialType : Swift.Int {
  case unspecified = 0
  case digitalCertificateForSignature = 1
  case verificationCodeA = 2
  case cardInfoInputAssistance = 3
  case verificationCodeB = 4
  case mynumberCardIntegratedDriverLicensePin = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class ChipErrorData : ObjectiveC.NSObject {
  @objc final public let attemptsRemainingUntilChipLocked: Swift.Int
  @objc final public let chipErrorCredentialType: Liquid.ChipErrorCredentialType
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CollateFaceParameters : ObjectiveC.NSObject {
  @objc final public let idFaceImage: UIKit.UIImage
  @objc final public let faceImage: UIKit.UIImage
  @objc deinit
}
@objc public class CollateFaceParametersBuilder : ObjectiveC.NSObject {
  @objc public init(idFaceImage: UIKit.UIImage, faceImage: UIKit.UIImage)
  @objc public func build() -> Liquid.CollateFaceParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CollateFaceResult : ObjectiveC.NSObject {
  @objc final public let result: Liquid.ProcResult
  @objc final public let facePhotoVerification: Liquid.FacePhotoVerification?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DesignSettings : ObjectiveC.NSObject {
  @objc final public let positiveButtonInactiveBgColor: UIKit.UIColor?
  @objc final public let positiveButtonActiveBgColor: UIKit.UIColor?
  @objc final public let positiveButtonFontColor: UIKit.UIColor?
  @objc final public let negativeButtonBgColor: UIKit.UIColor?
  final public let negativeButtonFontColor: UIKit.UIColor?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DesignSettingsBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func setPositiveButtonInactiveBgColor(_ color: UIKit.UIColor) -> Liquid.DesignSettingsBuilder
  @discardableResult
  @objc public func setPositiveButtonActiveBgColor(_ color: UIKit.UIColor) -> Liquid.DesignSettingsBuilder
  @discardableResult
  @objc public func setPositiveButtonFontColor(_ color: UIKit.UIColor) -> Liquid.DesignSettingsBuilder
  @discardableResult
  @objc public func setNegativeButtonBgColor(_ color: UIKit.UIColor) -> Liquid.DesignSettingsBuilder
  @discardableResult
  @objc public func setNegativeButtonFontColor(_ color: UIKit.UIColor) -> Liquid.DesignSettingsBuilder
  @objc public func build() -> Liquid.DesignSettings
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DisplayLanguage : Swift.Int {
  case auto = 0
  case japanese = 1
  case english = 2
  case vietnamese = 3
  case indonesian = 4
  case simplifiedChinese = 5
  case portuguese = 6
  case korean = 7
  case nepali = 8
  case burmese = 9
  case centralKhmer = 10
  case mongolian = 11
  case malay = 12
  case thai = 13
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DocumentImage : ObjectiveC.NSObject {
  @objc final public let front: UIKit.UIImage
  @available(*, deprecated)
  @objc final public let diagonal: UIKit.UIImage
  @objc final public let diagonalOrNil: UIKit.UIImage?
  @available(*, deprecated)
  @objc final public let back: UIKit.UIImage?
  @objc final public let backOrNil: UIKit.UIImage?
  @objc deinit
}
@objc public class DriverLicenseExternalCharacter : ObjectiveC.NSObject {
  @objc final public let size: Swift.Int
  @objc final public let image: Foundation.Data
  @objc public init(size: Swift.Int, image: Foundation.Data)
  @objc deinit
}
@objc public class DriverLicensePassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let pin1: Swift.String
  @objc final public let pin2: Swift.String
  @objc public init(pin1: Swift.String, pin2: Swift.String)
  @objc deinit
}
@objc public class DriverLicenseRawData : Liquid.ICRawData {
  @objc final public let licenseEntriesRawData: Swift.String
  @objc final public let registeredDomicileRawData: Swift.String
  @objc final public let photoRawData: Swift.String
  @objc final public let photo: Foundation.Data
  @objc final public let idNumber: Swift.String
  @objc final public let newName: Swift.String?
  @objc final public let newNameKana: Swift.String?
  @objc final public let newPreviousName: Swift.String?
  @objc final public let newAddress: Swift.String?
  @objc final public let externalCharacterName: [Liquid.DriverLicenseExternalCharacter]?
  @objc final public let externalCharacterAddress: [Liquid.DriverLicenseExternalCharacter]?
  @objc final public let externalCharacterNewName: [Liquid.DriverLicenseExternalCharacter]?
  @objc final public let externalCharacterPreviousName: [Liquid.DriverLicenseExternalCharacter]?
  @objc final public let externalCharacterNewPreviousName: [Liquid.DriverLicenseExternalCharacter]?
  @objc final public let externalCharacterNewAddress: [Liquid.DriverLicenseExternalCharacter]?
  @objc public var isExistLatestName: Swift.String?
  @objc public var isExistLatestAddress: Swift.String?
  @objc public init(licenseEntriesRawData: Swift.String, registeredDomicileRawData: Swift.String, photoRawData: Swift.String, photo: Foundation.Data, idNumber: Swift.String, newName: Swift.String? = nil, newNameKana: Swift.String? = nil, newPreviousName: Swift.String? = nil, newAddress: Swift.String? = nil, externalCharacterName: [Liquid.DriverLicenseExternalCharacter]? = nil, externalCharacterAddress: [Liquid.DriverLicenseExternalCharacter]? = nil, externalCharacterNewName: [Liquid.DriverLicenseExternalCharacter]? = nil, externalCharacterPreviousName: [Liquid.DriverLicenseExternalCharacter]? = nil, externalCharacterNewPreviousName: [Liquid.DriverLicenseExternalCharacter]? = nil, externalCharacterNewAddress: [Liquid.DriverLicenseExternalCharacter]? = nil, isExistLatestName: Swift.String? = nil, isExistLatestAddress: Swift.String? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class FaceImage : ObjectiveC.NSObject {
  @objc final public let faceFront: UIKit.UIImage
  @objc final public let liveness: Liquid.Liveness
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class FacePhotoVerification : ObjectiveC.NSObject {
  @objc final public let result: Liquid.FacePhotoVerificationResult
  @objc final public let score: Swift.Int
  @objc deinit
}
@objc public enum FacePhotoVerificationResult : Swift.Int {
  case high = 0
  case middle
  case low
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class FaceVerification : ObjectiveC.NSObject {
  @objc final public let result: Liquid.FaceVerificationResult
  @objc final public let score: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class FaceVerificationPassive : ObjectiveC.NSObject {
  @objc final public let result: Swift.Bool
  @objc deinit
}
@objc public enum FaceVerificationResult : Swift.Int {
  case same = 0
  case notEqual
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FaceVerificationType : Swift.Int {
  case active = 0
  case passive = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ICRawData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum IdChipAvailabilityStatus : Swift.Int {
  case enabled
  case unsupported
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IdDocumentType : Swift.Int {
  case driverLicence = 1
  case mynumberCard = 2
  case residenceCard = 3
  case passport = 4
  case specialPermanentResidentCertificate = 5
  case driverLicenseHistory = 6
  case healthInsuranceCard = 7
  case physicalDisabilityCertificateBook = 8
  case physicalDisabilityCertificateCard = 9
  case specialEducationBook = 10
  case specialEducationCard = 11
  case mentalDisabilityCertificateBook = 12
  case mentalDisabilityCertificateCard = 13
  case pensionBook = 14
  case basicPensionNumberNotification = 15
  case passportAllPeriods = 16
  case basicResidentRegistrationCard = 17
  case studentIdCard = 18
  case studentNotebook = 19
  case employeeIdCard = 21
  case mynumberCardWithMyNumber = 22
  case nonJapanesePassport = 23
  case mynumberCardIntegratedDriverLicense = 24
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Liquid.IdDocumentType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Liquid.IdDocumentType : Swift.CaseIterable {
  public typealias AllCases = [Liquid.IdDocumentType]
  nonisolated public static var allCases: [Liquid.IdDocumentType] {
    get
  }
}
@objc public enum IdDocumentTypeJpki : Swift.Int {
  case mynumberCard = 1
  case mynumberCardWithMyNumber = 2
  case mynumberCardIntegratedDriverLicense = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class IdDocumentVerification : ObjectiveC.NSObject {
  @objc final public let result: Swift.Bool
  @objc final public let score: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IdentifyIdChipNonInteractiveParameters : ObjectiveC.NSObject {
  @objc final public let documentTypeJpki: Liquid.IdDocumentTypeJpki
  @objc final public let password: Swift.String
  @objc final public let credential: (any Liquid.WithMyNumberCredential)?
  @objc final public let integratedDocumentCredential: Liquid.IntegratedDriverLicenseCredential?
  @objc final public let base64TargetData: Swift.String?
  @objc deinit
}
@objc public class IdentifyIdChipNonInteractiveParametersBuilder : ObjectiveC.NSObject {
  @objc public init(password: Swift.String)
  @discardableResult
  @objc public func setDocumentTypeJpki(_ documentTypeJpki: Liquid.IdDocumentTypeJpki) -> Liquid.IdentifyIdChipNonInteractiveParametersBuilder
  @discardableResult
  @objc public func setCredential(_ credential: any Liquid.WithMyNumberCredential) -> Liquid.IdentifyIdChipNonInteractiveParametersBuilder
  @discardableResult
  @objc public func setBase64TargetData(_ base64TargetData: Swift.String?) -> Liquid.IdentifyIdChipNonInteractiveParametersBuilder
  @discardableResult
  @objc public func setIntegratedDocumentCredential(_ integratedDocumentCredential: Liquid.IntegratedDriverLicenseCredential) -> Liquid.IdentifyIdChipNonInteractiveParametersBuilder
  @objc public func build() -> Liquid.IdentifyIdChipNonInteractiveParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IdentifyIdChipParameters : ObjectiveC.NSObject {
  @objc final public let documentTypeJpki: Liquid.IdDocumentTypeJpki
  @objc final public let verificationMethodJpki: Liquid.VerificationMethodJpki
  @objc final public let base64TargetData: Swift.String?
  @objc final public let enabledChipForgotPin: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class IdentifyIdChipParametersBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func setDocumentTypeJpki(_ documentTypeJpki: Liquid.IdDocumentTypeJpki) -> Liquid.IdentifyIdChipParametersBuilder
  @discardableResult
  @objc public func setVerificationMethodJpki(_ verificationMethodJpki: Liquid.VerificationMethodJpki) -> Liquid.IdentifyIdChipParametersBuilder
  @discardableResult
  @objc public func setBase64TargetData(_ base64TargetData: Swift.String?) -> Liquid.IdentifyIdChipParametersBuilder
  @discardableResult
  @objc public func setEnabledChipForgotPin(_ enabledChipForgotPin: Swift.Bool) -> Liquid.IdentifyIdChipParametersBuilder
  @objc public func build() -> Liquid.IdentifyIdChipParameters
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IdentifyIdChipResult : ObjectiveC.NSObject {
  @objc public var result: Liquid.ProcResult
  @objc public var jpkiResult: Liquid.JpkiResult
  @objc public var jpkiEvidence: Liquid.JpkiEvidence
  @objc public var chipData: Liquid.ChipData?
  @objc deinit
}
@objc public protocol IntegratedDocumentCredential {
}
@objc public class IntegratedDriverLicenseCredential : ObjectiveC.NSObject, Liquid.IntegratedDocumentCredential {
  @objc final public let pin: Swift.String
  @objc public init(pin: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class JapaneseForeignerJudgment : ObjectiveC.NSObject {
  @objc public static var japanese: Liquid.JapaneseForeignerJudgment
  @objc public static var foreigner: Liquid.JapaneseForeignerJudgment
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class JpkiEvidence : ObjectiveC.NSObject {
  @objc public var uid: Swift.String?
  @objc public var asof: Swift.String?
  @objc public var notBefore: Swift.String?
  @objc public var notAfter: Swift.String?
  @objc public var issuerDn: Swift.String?
  @objc public var signatureId: Swift.String?
  @objc public var revokedReason: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class JpkiResult : ObjectiveC.NSObject {
  @objc public var isSuccess: Swift.Bool
  @objc deinit
}
extension Liquid.LiquidEkyc {
  @objc public static func checkIdChipAvailability() -> Liquid.IdChipAvailabilityStatus
}
extension Liquid.LiquidEkyc {
  @objc(collateFaceWithParameters:completion:) public static func collateFace(_ collateFaceParameters: Liquid.CollateFaceParameters, completion: @escaping (Liquid.CollateFaceResult) -> Swift.Void)
}
extension Liquid.LiquidEkyc {
  @objc(identifyIdChipNonInteractiveWithParameters:on:completion:) public static func identifyIdChipNonInteractive(_ parameters: Liquid.IdentifyIdChipNonInteractiveParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.IdentifyIdChipResult) -> Swift.Void)
}
extension Liquid.LiquidEkyc {
  @objc public static func captureOptionalDocument(_ captureOptionalDocumentParameters: Liquid.CaptureOptionalDocumentParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.OptionalDocumentCapturingResult) -> Swift.Void)
}
extension Liquid.LiquidEkyc {
  @objc public static func startVerifyStandalone(endpoint: Foundation.URL, apiKey: Swift.String, completion: @escaping (Liquid.ProcResult) -> Swift.Void) -> Swift.String
}
extension Liquid.LiquidEkyc {
  @_spi(LiquidOnly) @nonobjc public static func verifyFaceManual(_ verifyFaceManualParameters: Liquid.VerifyFaceManualParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyFaceResult) -> Swift.Void)
}
extension Liquid.LiquidEkyc {
  @objc public static func verifyIdChipNonInteractive(_ parameters: Liquid.VerifyIdChipNonInteractiveParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc public class LiquidEkyc : ObjectiveC.NSObject {
  @objc public static func startVerify(endpoint: Foundation.URL, applicant: Swift.String, token: Swift.String)
  @available(*, deprecated)
  @objc public static func startVerify(endpoint: Foundation.URL, token: Swift.String, applicant: Swift.String, apiKey: Swift.String)
  @objc public static func startVerify(endpoint: Foundation.URL, apiKey: Swift.String, completion: @escaping (Liquid.ProcResult) -> Swift.Void) -> Swift.String
  @available(*, deprecated)
  @objc public static func verifyFace(on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyFaceResult) -> Swift.Void)
  @objc(verifyFaceWithParameters:on:completion:) public static func verifyFace(_ verifyFaceParameters: Liquid.VerifyFaceParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyFaceResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func verifyIdDocument(_ document: Liquid.IdDocumentType, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdDocumentResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func verifyIdDocument(_ document: Liquid.IdDocumentType, _ verificationMethod: Liquid.VerificationMethod, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdDocumentResult) -> Swift.Void)
  @objc(verifyIdDocumentWithParameters:on:completion:) public static func verifyIdDocument(_ verifyIdDocumentParameters: Liquid.VerifyIdDocumentParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdDocumentResult) -> Swift.Void)
  @objc(verifyIdChipWithParameters:on:completion:) public static func verifyIdChip(_ verifyIdChipParameters: Liquid.VerifyIdChipParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func verifyIdChip(_ document: Liquid.IdDocumentType, _ verificationMethod: Liquid.VerificationMethod, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func verifyIdChip(_ document: Liquid.IdDocumentType, chipVerifyKey: Swift.String, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
  @objc public static func verifyIdChip(_ verificationMethod: Liquid.VerificationMethod, showReviewScreen: Swift.Bool, signature: Swift.String, verifyingParams: Swift.String, rawData: Liquid.ICRawData, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
  @objc public static func verifyIdChipExcludeBack(_ verificationMethod: Liquid.VerificationMethod, signature: Swift.String, verifyingParams: Swift.String, rawData: Liquid.ICRawData, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.VerifyIdChipResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func identifyIdChip(_ base64TargetData: Swift.String? = nil, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.IdentifyIdChipResult) -> Swift.Void)
  @objc(identifyIdChipWithParameters:on:completion:) public static func identifyIdChip(_ parameters: Liquid.IdentifyIdChipParameters, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.IdentifyIdChipResult) -> Swift.Void)
  @available(*, deprecated)
  @objc public static func endVerify()
  @objc public static func activate(completion: @escaping (Liquid.ProcResult) -> Swift.Void)
  @objc public static func getOcrResults(completion: @escaping (Liquid.OcrResult) -> Swift.Void)
  @objc public static func showTermsOfUse(settings termsOfUseSettings: Liquid.TermsOfUseSettings? = nil, on viewController: UIKit.UIViewController, completion: @escaping (Liquid.ProcResult) -> Swift.Void)
  @objc public static func customizeDesign(_ designSettings: Liquid.DesignSettings)
  @objc public static func getVersion() -> Swift.String
  @objc public static func changeDisplayLanguage(language: Liquid.DisplayLanguage)
  @objc override dynamic public init()
  @objc deinit
}
extension Liquid.LiquidEkyc {
  @objc public static func verifyIdChipSupplementaryNonInteractive(_ parameters: Liquid.VerifyIdChipSupplementaryNonInteractiveParameters, completion: @escaping (Liquid.VerifyIdChipSupplementaryNonInteractiveResult) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Liveness : ObjectiveC.NSObject {
  @objc final public let pattern1: UIKit.UIImage
  @objc final public let pattern2: UIKit.UIImage
  @objc final public let pattern3: UIKit.UIImage
  @objc final public let pattern4: UIKit.UIImage
  @objc final public let pattern5: UIKit.UIImage
  @objc final public let pattern6: UIKit.UIImage
  @objc final public let pattern7: UIKit.UIImage
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MovedAbroad : ObjectiveC.NSObject {
  @objc public static var unknown: Liquid.MovedAbroad
  @objc public static var no: Liquid.MovedAbroad
  @objc public static var yes: Liquid.MovedAbroad
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MyNumberCardIntegratedDriverLicenseData : ObjectiveC.NSObject {
  @objc public var colorCategory: Swift.String?
  @objc public var conditions: [Swift.String]?
  @objc public var types: [Swift.String]?
  @objc public var remarks: [Swift.String]?
  @objc public var acquisitionDates: [Swift.String]?
  @objc public var recordNumber: Swift.String?
  @objc public var validUntil: Swift.String?
  @objc public var faceImage: UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MyNumberCardIntegratedDriverLicensePassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let myNumberPassword: Swift.String
  @objc final public let birthYearCalendarType: Liquid.BirthYearCalendarType
  @objc final public let integratedDriverLicensePin: Swift.String
  @objc public init(myNumberPassword: Swift.String, birthYearCalendarType: Liquid.BirthYearCalendarType, integratedDriverLicensePin: Swift.String)
  @objc deinit
}
@objc public class MyNumberCardPassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let password: Swift.String
  @objc final public let birthYearCalendarType: Liquid.BirthYearCalendarType
  @objc public init(password: Swift.String, birthYearCalendarType: Liquid.BirthYearCalendarType)
  @objc deinit
}
@objc public class MyNumberCardRawData : Liquid.ICRawData {
  @objc final public let rawData: Swift.String
  @objc final public let expireDate: Swift.String
  @objc final public let photo: Foundation.Data
  @objc public init(rawData: Swift.String, expireData: Swift.String, photo: Foundation.Data)
  @objc deinit
}
@objc public class MyNumberCardWithMyNumberPassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let password: Swift.String
  @objc final public let birthYearCalendarType: Liquid.BirthYearCalendarType
  @objc final public let credential: any Liquid.WithMyNumberCredential
  @objc public init(password: Swift.String, birthYearCalendarType: Liquid.BirthYearCalendarType, credential: any Liquid.WithMyNumberCredential)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class OcrAcquisition : ObjectiveC.NSObject {
  @objc public var name: Swift.String?
  @objc public var birthday: Swift.String?
  @objc public var address: Swift.String?
  @objc public var idNumber: Swift.String?
  @objc public var expireDate: Swift.String?
  @objc public var nationality: Swift.String?
  @objc public var sex: Swift.String?
  @objc public var zipCode: Swift.String?
  @objc public var addressPref: Swift.String?
  @objc public var addressCity: Swift.String?
  @objc public var addressOther: Swift.String?
  @objc public var driversLicenseTypes: [Swift.String]?
  @objc public var remarksExist: Swift.String?
  @objc public var residentStatus: Swift.String?
  @objc public var stayPeriod: Swift.String?
  @objc public var stayExpireDate: Swift.String?
  @objc public var permittedDate: Swift.String?
  @objc public var kindOfPermission: Swift.String?
  @objc public var employmentRestriction: Swift.String?
  @objc public var issueDate: Swift.String?
  @objc public var issuingAuthority: Swift.String?
  @objc public var nameChanged: Swift.String?
  @objc public var addressChanged: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class OcrResult : ObjectiveC.NSObject {
  @objc final public let result: Liquid.ProcResult
  @objc final public let ocr: Liquid.OcrAcquisition?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class OptionalDocumentCapturingResult : ObjectiveC.NSObject {
  @objc final public let result: Liquid.ProcResult
  @objc final public let seqNo: Swift.Int
  @objc final public let optionalDocumentType: Swift.String?
  @objc final public let optionalDocumentImages: [UIKit.UIImage]?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ProcResult : ObjectiveC.NSObject {
  @objc final public let status: Liquid.ResultStatus
  @objc public var resultCode: Swift.String {
    @objc get
  }
  @objc public var additionalData: Liquid.AdditionalData? {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AdditionalData : ObjectiveC.NSObject {
  @objc final public let maintenanceTitle: Swift.String
  @objc final public let maintenanceMessage: Swift.String
  @objc deinit
}
@objc public enum ResultStatus : Swift.Int {
  case success
  case maintenance
  case permissionNotAllowed
  case screenTimeout
  case sessionTimeout
  case ocrInProgress
  case ocrUnSupported
  case userCancel
  case error
  case chipLocked
  case chipUnusual
  case chipUnusualUpdated
  case chipVerifyFailure
  case chipUnusualResidencecard
  case chipMissingExternalChar
  case unsupportedChip
  case chipPinFailure
  case chipExpired
  case chipForgotPin
  case chipIdentifyDenied
  case chipIdentifyError
  case termsDoNotAgree
  case communicationFailure
  case chipPinInvalid
  case chipReadError
  case mynumberIntegratedDriverHistory
  case mynumbercardIntegratedDriverLicenseVerifyFailure
  case mynumbercardIntegratedDriverLicenseExpired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ResidenceCardInfoType : Swift.Int {
  case normal
  case under_16
  case noCertificate
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class ResidenceCardPassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let cardNumber: Swift.String
  @objc public init(cardNumber: Swift.String)
  @objc deinit
}
@objc public class ResidenceCardRawData : Liquid.ICRawData {
  @objc final public let rawData: Swift.String
  @objc final public let photo: Foundation.Data
  @objc final public let frontDocumentImage: Foundation.Data
  @objc final public let residenceCardUpdateStatus: Swift.Bool
  @objc final public let residenceCardInfoType: Swift.Int
  @objc final public let residenceCardType: Swift.Int
  @objc final public let residenceCardComprehensivePermission: Swift.String?
  @objc final public let residenceCardIndividualPermission: Swift.String?
  @objc public init(rawData: Swift.String, photo: Foundation.Data, frontDocumentImage: Foundation.Data, residenceCardUpdateStatus: Swift.Bool, residenceCardInfoType: Swift.Int, residenceCardType: Swift.Int, residenceCardComprehensivePermission: Swift.String? = nil, residenceCardIndividualPermission: Swift.String? = nil)
  @objc deinit
}
@objc public enum ResidenceCardType : Swift.Int {
  case undetected
  case residenceCard
  case specialPermanentResidentCertificate
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Sex : Swift.Int {
  case male
  case female
  case others
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SpecialPermanentResidentCertificatePassword : ObjectiveC.NSObject, Liquid.VerifyIdChipPassword {
  @objc final public let cardNumber: Swift.String
  @objc public init(cardNumber: Swift.String)
  @objc deinit
}
@objc public class SpecialPermanentResidentCertificateRawData : Liquid.ICRawData {
  @objc final public let rawData: Swift.String
  @objc final public let photo: Foundation.Data
  @objc final public let frontDocumentImage: Foundation.Data
  @objc final public let residenceCardInfoType: Swift.Int
  @objc final public let residenceCardType: Swift.Int
  @objc public init(rawData: Swift.String, photo: Foundation.Data, frontDocumentImage: Foundation.Data, residenceCardInfoType: Swift.Int, residenceCardType: Swift.Int)
  @objc deinit
}
@objc public class TermsOfUseSettings : ObjectiveC.NSObject {
  @objc final public let headerFontColor: UIKit.UIColor?
  @objc final public let screenBgColor: UIKit.UIColor?
  @objc final public let prefaceFontColor: UIKit.UIColor?
  @objc final public let buttonInactiveBgColor: UIKit.UIColor?
  @objc final public let buttonActiveBgColor: UIKit.UIColor?
  @objc final public let buttonFontColor: UIKit.UIColor?
  @objc public init(headerFontColor: UIKit.UIColor? = nil, screenBgColor: UIKit.UIColor? = nil, prefaceFontColor: UIKit.UIColor? = nil, buttonInactiveBgColor: UIKit.UIColor? = nil, buttonActiveBgColor: UIKit.UIColor? = nil, buttonFontColor: UIKit.UIColor? = nil)
  @objc deinit
}
@objc public class VerificationCodeACredential : ObjectiveC.NSObject, Liquid.WithMyNumberCredential {
  @objc final public let pin: Swift.String
  @objc public init(pin: Swift.String)
  @objc deinit
}
@objc public enum VerificationMethod : Swift.Int {
  case complyHe = 1
  case readFace = 2
  case complyTo = 3
  case complyChi = 4
  case read = 5
  case complyHo = 6
  case frontFace = 7
  case front = 8
  case frontBackFace = 9
  case frontBack = 10
  case readOffline = 11
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VerificationMethodJpki : Swift.Int {
  case complyWa = 1
  case faceJpki = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_spi(LiquidOnly) @objc @_inheritsConvenienceInitializers public class VerifyFaceManualParameters : ObjectiveC.NSObject {
  @_spi(LiquidOnly) @objc override dynamic public init()
  @_spi(LiquidOnly) @objc deinit
}
@_spi(LiquidOnly) @objc @_inheritsConvenienceInitializers public class VerifyFaceManualParametersBuilder : ObjectiveC.NSObject {
  @_spi(LiquidOnly) public func build() -> Liquid.VerifyFaceManualParameters
  @_spi(LiquidOnly) @objc override dynamic public init()
  @_spi(LiquidOnly) @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyFaceParameters : ObjectiveC.NSObject {
  @objc final public let showReviewScreen: Swift.Bool
  @objc final public let faceVerificationType: Liquid.FaceVerificationType
  @objc final public let controlCharacter: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VerifyFaceParametersBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func setShowReviewScreen(_ showReviewScreen: Swift.Bool) -> Liquid.VerifyFaceParametersBuilder
  @discardableResult
  @objc public func setFaceVerificationType(_ verifyType: Liquid.FaceVerificationType) -> Liquid.VerifyFaceParametersBuilder
  @discardableResult
  @objc public func setControlCharacter(_ controlCharacter: Swift.String) -> Liquid.VerifyFaceParametersBuilder
  @objc public func build() -> Liquid.VerifyFaceParameters
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyFaceResult : ObjectiveC.NSObject {
  @objc final public let result: Liquid.ProcResult
  @objc final public let facePhotoVerification: Liquid.FacePhotoVerification?
  @objc final public let faceVerification: Liquid.FaceVerification?
  @objc final public let faceVerificationPassive: Liquid.FaceVerificationPassive?
  @objc final public let faceImage: Liquid.FaceImage?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdChipNonInteractiveParameters : ObjectiveC.NSObject {
  @objc final public let password: any Liquid.VerifyIdChipPassword
  @objc deinit
}
@objc public class VerifyIdChipNonInteractiveParametersBuilder : ObjectiveC.NSObject {
  @objc public init(password: any Liquid.VerifyIdChipPassword)
  @objc public func build() -> Liquid.VerifyIdChipNonInteractiveParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdChipParameters : ObjectiveC.NSObject {
  @objc final public let document: Liquid.IdDocumentType
  @objc final public let verificationMethod: Liquid.VerificationMethod
  @objc final public let showReviewScreen: Swift.Bool
  @objc deinit
}
@objc public class VerifyIdChipParametersBuilder : ObjectiveC.NSObject {
  @objc public init(document: Liquid.IdDocumentType, verificationMethod: Liquid.VerificationMethod)
  @discardableResult
  @objc public func setShowReviewScreen(_ showReviewScreen: Swift.Bool) -> Liquid.VerifyIdChipParametersBuilder
  @objc public func build() -> Liquid.VerifyIdChipParameters
  @objc deinit
}
@objc public protocol VerifyIdChipPassword {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VerifyIdChipResult : ObjectiveC.NSObject {
  @objc public var result: Liquid.ProcResult
  @objc public var facePhotoVerification: Liquid.FacePhotoVerification?
  @objc public var faceVerification: Liquid.FaceVerification?
  @objc public var faceVerificationPassive: Liquid.FaceVerificationPassive?
  @objc public var documentImage: Liquid.DocumentImage?
  @objc public var chipData: Liquid.ChipData?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdChipSupplementaryNonInteractiveParameters : ObjectiveC.NSObject {
  @objc final public let document: Liquid.IdDocumentType
  @objc final public let backImage: Foundation.Data?
  @objc deinit
}
@objc public class VerifyIdChipSupplementaryNonInteractiveParametersBuilder : ObjectiveC.NSObject {
  @objc public init(document: Liquid.IdDocumentType)
  @discardableResult
  @objc public func setBackImage(_ backImage: Foundation.Data) -> Liquid.VerifyIdChipSupplementaryNonInteractiveParametersBuilder
  @objc public func build() -> Liquid.VerifyIdChipSupplementaryNonInteractiveParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdChipSupplementaryNonInteractiveResult : ObjectiveC.NSObject {
  @objc public var result: Liquid.ProcResult
  @objc public var facePhotoVerification: Liquid.FacePhotoVerification?
  @objc public var faceVerification: Liquid.FaceVerification?
  @objc public var faceVerificationPassive: Liquid.FaceVerificationPassive?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdDocumentParameters : ObjectiveC.NSObject {
  @objc final public let document: Liquid.IdDocumentType
  @objc final public let verificationMethod: Liquid.VerificationMethod
  @objc final public let showReviewScreen: Swift.Bool
  @objc final public let useIdDocumentVerification: Swift.Bool
  @objc deinit
}
@objc public class VerifyIdDocumentParametersBuilder : ObjectiveC.NSObject {
  @objc public init(document: Liquid.IdDocumentType, verificationMethod: Liquid.VerificationMethod)
  @discardableResult
  @objc public func setShowReviewScreen(_ showReviewScreen: Swift.Bool) -> Liquid.VerifyIdDocumentParametersBuilder
  @discardableResult
  @objc public func setUseIdDocumentVerification(_ useIdDocumentVerification: Swift.Bool) -> Liquid.VerifyIdDocumentParametersBuilder
  @objc public func build() -> Liquid.VerifyIdDocumentParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VerifyIdDocumentResult : ObjectiveC.NSObject {
  @objc final public let result: Liquid.ProcResult
  @objc final public let facePhotoVerification: Liquid.FacePhotoVerification?
  @objc final public let faceVerification: Liquid.FaceVerification?
  @objc final public let faceVerificationPassive: Liquid.FaceVerificationPassive?
  @objc final public let idDocumentVerification: Liquid.IdDocumentVerification?
  @objc final public let documentImage: Liquid.DocumentImage?
  @objc deinit
}
@objc public protocol WithMyNumberCredential {
}
extension Liquid.BirthYearCalendarType : Swift.Equatable {}
extension Liquid.BirthYearCalendarType : Swift.Hashable {}
extension Liquid.BirthYearCalendarType : Swift.RawRepresentable {}
extension Liquid.ChipErrorCredentialType : Swift.Equatable {}
extension Liquid.ChipErrorCredentialType : Swift.Hashable {}
extension Liquid.ChipErrorCredentialType : Swift.RawRepresentable {}
extension Liquid.DisplayLanguage : Swift.Equatable {}
extension Liquid.DisplayLanguage : Swift.Hashable {}
extension Liquid.DisplayLanguage : Swift.RawRepresentable {}
extension Liquid.FacePhotoVerificationResult : Swift.Equatable {}
extension Liquid.FacePhotoVerificationResult : Swift.Hashable {}
extension Liquid.FacePhotoVerificationResult : Swift.RawRepresentable {}
extension Liquid.FaceVerificationResult : Swift.Equatable {}
extension Liquid.FaceVerificationResult : Swift.Hashable {}
extension Liquid.FaceVerificationResult : Swift.RawRepresentable {}
extension Liquid.FaceVerificationType : Swift.Equatable {}
extension Liquid.FaceVerificationType : Swift.Hashable {}
extension Liquid.FaceVerificationType : Swift.RawRepresentable {}
extension Liquid.IdChipAvailabilityStatus : Swift.Equatable {}
extension Liquid.IdChipAvailabilityStatus : Swift.Hashable {}
extension Liquid.IdChipAvailabilityStatus : Swift.RawRepresentable {}
extension Liquid.IdDocumentType : Swift.Equatable {}
extension Liquid.IdDocumentType : Swift.Hashable {}
extension Liquid.IdDocumentType : Swift.RawRepresentable {}
extension Liquid.IdDocumentTypeJpki : Swift.Equatable {}
extension Liquid.IdDocumentTypeJpki : Swift.Hashable {}
extension Liquid.IdDocumentTypeJpki : Swift.RawRepresentable {}
extension Liquid.Sex : Swift.Equatable {}
extension Liquid.Sex : Swift.Hashable {}
extension Liquid.Sex : Swift.RawRepresentable {}
extension Liquid.ResultStatus : Swift.Equatable {}
extension Liquid.ResultStatus : Swift.Hashable {}
extension Liquid.ResultStatus : Swift.RawRepresentable {}
extension Liquid.ResidenceCardInfoType : Swift.Equatable {}
extension Liquid.ResidenceCardInfoType : Swift.Hashable {}
extension Liquid.ResidenceCardInfoType : Swift.RawRepresentable {}
extension Liquid.ResidenceCardType : Swift.Equatable {}
extension Liquid.ResidenceCardType : Swift.Hashable {}
extension Liquid.ResidenceCardType : Swift.RawRepresentable {}
extension Liquid.VerificationMethod : Swift.Equatable {}
extension Liquid.VerificationMethod : Swift.Hashable {}
extension Liquid.VerificationMethod : Swift.RawRepresentable {}
extension Liquid.VerificationMethodJpki : Swift.Equatable {}
extension Liquid.VerificationMethodJpki : Swift.Hashable {}
extension Liquid.VerificationMethodJpki : Swift.RawRepresentable {}
